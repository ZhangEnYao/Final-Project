//
//  main.c
//  Final Project
//
//  Created by En-Yao Zhang on 2020/5/13.
//  Copyright Â© 2020 En-Yao Zhang. All rights reserved.
//
#include <time.h>
#include <stdio.h>
#include <stdlib.h>
//Define Parameters.
#define IdentificationExistence 1
#define IdentificationNonExistence 0
#define NumberOfBins 10
#define NumberOfFolds 5
#define alpha 50
//Glass Idenfication DataSet Informations.
#define NumberOfInstanceInGlassDataSet 214
#define NumberOfAttributeInGlassDataSet 9
#define NumberOfClassInGlassDataSet 1
int NumberOfCategoryOfEachAttributeValueInGlassDataSet[NumberOfAttributeInGlassDataSet]={
    10, 10, 10, 10, 10, 10, 10, 10, 10
};
#define NumberOfCategoryOfClassInGlassDataSet 7
int DataTypeOfEachAttributeInGlassDataSet[NumberOfAttributeInGlassDataSet]={
    1, 1, 1, 1, 1, 1, 1, 1, 1
};
double GlassDataSet[NumberOfInstanceInGlassDataSet][IdentificationExistence+NumberOfAttributeInGlassDataSet+NumberOfClassInGlassDataSet]={
    {1,      1.52101,    13.64,    4.49,    1.10,    71.78,    0.06,    8.75,    0.00,    0.00,    1},
    {2,      1.51761,    13.89,    3.60,    1.36,    72.73,    0.48,    7.83,    0.00,    0.00,    1},
    {3,      1.51618,    13.53,    3.55,    1.54,    72.99,    0.39,    7.78,    0.00,    0.00,    1},
    {4,      1.51766,    13.21,    3.69,    1.29,    72.61,    0.57,    8.22,    0.00,    0.00,    1},
    {5,      1.51742,    13.27,    3.62,    1.24,    73.08,    0.55,    8.07,    0.00,    0.00,    1},
    {6,      1.51596,    12.79,    3.61,    1.62,    72.97,    0.64,    8.07,    0.00,    0.26,    1},
    {7,      1.51743,    13.30,    3.60,    1.14,    73.09,    0.58,    8.17,    0.00,    0.00,    1},
    {8,      1.51756,    13.15,    3.61,    1.05,    73.24,    0.57,    8.24,    0.00,    0.00,    1},
    {9,      1.51918,    14.04,    3.58,    1.37,    72.08,    0.56,    8.30,    0.00,    0.00,    1},
    {10,     1.51755,    13.00,    3.60,    1.36,    72.99,    0.57,    8.40,    0.00,    0.11,    1},
    {11,     1.51571,    12.72,    3.46,    1.56,    73.20,    0.67,    8.09,    0.00,    0.24,    1},
    {12,     1.51763,    12.80,    3.66,    1.27,    73.01,    0.60,    8.56,    0.00,    0.00,    1},
    {13,     1.51589,    12.88,    3.43,    1.40,    73.28,    0.69,    8.05,    0.00,    0.24,    1},
    {14,     1.51748,    12.86,    3.56,    1.27,    73.21,    0.54,    8.38,    0.00,    0.17,    1},
    {15,     1.51763,    12.61,    3.59,    1.31,    73.29,    0.58,    8.50,    0.00,    0.00,    1},
    {16,     1.51761,    12.81,    3.54,    1.23,    73.24,    0.58,    8.39,    0.00,    0.00,    1},
    {17,     1.51784,    12.68,    3.67,    1.16,    73.11,    0.61,    8.70,    0.00,    0.00,    1},
    {18,     1.52196,    14.36,    3.85,    0.89,    71.36,    0.15,    9.15,    0.00,    0.00,    1},
    {19,     1.51911,    13.90,    3.73,    1.18,    72.12,    0.06,    8.89,    0.00,    0.00,    1},
    {20,     1.51735,    13.02,    3.54,    1.69,    72.73,    0.54,    8.44,    0.00,    0.07,    1},
    {21,     1.51750,    12.82,    3.55,    1.49,    72.75,    0.54,    8.52,    0.00,    0.19,    1},
    {22,     1.51966,    14.77,    3.75,    0.29,    72.02,    0.03,    9.00,    0.00,    0.00,    1},
    {23,     1.51736,    12.78,    3.62,    1.29,    72.79,    0.59,    8.70,    0.00,    0.00,    1},
    {24,     1.51751,    12.81,    3.57,    1.35,    73.02,    0.62,    8.59,    0.00,    0.00,    1},
    {25,     1.51720,    13.38,    3.50,    1.15,    72.85,    0.50,    8.43,    0.00,    0.00,    1},
    {26,     1.51764,    12.98,    3.54,    1.21,    73.00,    0.65,    8.53,    0.00,    0.00,    1},
    {27,     1.51793,    13.21,    3.48,    1.41,    72.64,    0.59,    8.43,    0.00,    0.00,    1},
    {28,     1.51721,    12.87,    3.48,    1.33,    73.04,    0.56,    8.43,    0.00,    0.00,    1},
    {29,     1.51768,    12.56,    3.52,    1.43,    73.15,    0.57,    8.54,    0.00,    0.00,    1},
    {30,     1.51784,    13.08,    3.49,    1.28,    72.86,    0.60,    8.49,    0.00,    0.00,    1},
    {31,     1.51768,    12.65,    3.56,    1.30,    73.08,    0.61,    8.69,    0.00,    0.14,    1},
    {32,     1.51747,    12.84,    3.50,    1.14,    73.27,    0.56,    8.55,    0.00,    0.00,    1},
    {33,     1.51775,    12.85,    3.48,    1.23,    72.97,    0.61,    8.56,    0.09,    0.22,    1},
    {34,     1.51753,    12.57,    3.47,    1.38,    73.39,    0.60,    8.55,    0.00,    0.06,    1},
    {35,     1.51783,    12.69,    3.54,    1.34,    72.95,    0.57,    8.75,    0.00,    0.00,    1},
    {36,     1.51567,    13.29,    3.45,    1.21,    72.74,    0.56,    8.57,    0.00,    0.00,    1},
    {37,     1.51909,    13.89,    3.53,    1.32,    71.81,    0.51,    8.78,    0.11,    0.00,    1},
    {38,     1.51797,    12.74,    3.48,    1.35,    72.96,    0.64,    8.68,    0.00,    0.00,    1},
    {39,     1.52213,    14.21,    3.82,    0.47,    71.77,    0.11,    9.57,    0.00,    0.00,    1},
    {40,     1.52213,    14.21,    3.82,    0.47,    71.77,    0.11,    9.57,    0.00,    0.00,    1},
    {41,     1.51793,    12.79,    3.50,    1.12,    73.03,    0.64,    8.77,    0.00,    0.00,    1},
    {42,     1.51755,    12.71,    3.42,    1.20,    73.20,    0.59,    8.64,    0.00,    0.00,    1},
    {43,     1.51779,    13.21,    3.39,    1.33,    72.76,    0.59,    8.59,    0.00,    0.00,    1},
    {44,     1.52210,    13.73,    3.84,    0.72,    71.76,    0.17,    9.74,    0.00,    0.00,    1},
    {45,     1.51786,    12.73,    3.43,    1.19,    72.95,    0.62,    8.76,    0.00,    0.30,    1},
    {46,     1.51900,    13.49,    3.48,    1.35,    71.95,    0.55,    9.00,    0.00,    0.00,    1},
    {47,     1.51869,    13.19,    3.37,    1.18,    72.72,    0.57,    8.83,    0.00,    0.16,    1},
    {48,     1.52667,    13.99,    3.70,    0.71,    71.57,    0.02,    9.82,    0.00,    0.10,    1},
    {49,     1.52223,    13.21,    3.77,    0.79,    71.99,    0.13,    10.02,   0.00,    0.00,    1},
    {50,     1.51898,    13.58,    3.35,    1.23,    72.08,    0.59,    8.91,    0.00,    0.00,    1},
    {51,     1.52320,    13.72,    3.72,    0.51,    71.75,    0.09,    10.06,   0.00,    0.16,    1},
    {52,     1.51926,    13.20,    3.33,    1.28,    72.36,    0.60,    9.14,    0.00,    0.11,    1},
    {53,     1.51808,    13.43,    2.87,    1.19,    72.84,    0.55,    9.03,    0.00,    0.00,    1},
    {54,     1.51837,    13.14,    2.84,    1.28,    72.85,    0.55,    9.07,    0.00,    0.00,    1},
    {55,     1.51778,    13.21,    2.81,    1.29,    72.98,    0.51,    9.02,    0.00,    0.09,    1},
    {56,     1.51769,    12.45,    2.71,    1.29,    73.70,    0.56,    9.06,    0.00,    0.24,    1},
    {57,     1.51215,    12.99,    3.47,    1.12,    72.98,    0.62,    8.35,    0.00,    0.31,    1},
    {58,     1.51824,    12.87,    3.48,    1.29,    72.95,    0.60,    8.43,    0.00,    0.00,    1},
    {59,     1.51754,    13.48,    3.74,    1.17,    72.99,    0.59,    8.03,    0.00,    0.00,    1},
    {60,     1.51754,    13.39,    3.66,    1.19,    72.79,    0.57,    8.27,    0.00,    0.11,    1},
    {61,     1.51905,    13.60,    3.62,    1.11,    72.64,    0.14,    8.76,    0.00,    0.00,    1},
    {62,     1.51977,    13.81,    3.58,    1.32,    71.72,    0.12,    8.67,    0.69,    0.00,    1},
    {63,     1.52172,    13.51,    3.86,    0.88,    71.79,    0.23,    9.54,    0.00,    0.11,    1},
    {64,     1.52227,    14.17,    3.81,    0.78,    71.35,    0.00,    9.69,    0.00,    0.00,    1},
    {65,     1.52172,    13.48,    3.74,    0.90,    72.01,    0.18,    9.61,    0.00,    0.07,    1},
    {66,     1.52099,    13.69,    3.59,    1.12,    71.96,    0.09,    9.40,    0.00,    0.00,    1},
    {67,     1.52152,    13.05,    3.65,    0.87,    72.22,    0.19,    9.85,    0.00,    0.17,    1},
    {68,     1.52152,    13.05,    3.65,    0.87,    72.32,    0.19,    9.85,    0.00,    0.17,    1},
    {69,     1.52152,    13.12,    3.58,    0.90,    72.20,    0.23,    9.82,    0.00,    0.16,    1},
    {70,     1.52300,    13.31,    3.58,    0.82,    71.99,    0.12,    10.17,   0.00,    0.03,    1},
    {71,     1.51574,    14.86,    3.67,    1.74,    71.87,    0.16,    7.36,    0.00,    0.12,    2},
    {72,     1.51848,    13.64,    3.87,    1.27,    71.96,    0.54,    8.32,    0.00,    0.32,    2},
    {73,     1.51593,    13.09,    3.59,    1.52,    73.10,    0.67,    7.83,    0.00,    0.00,    2},
    {74,     1.51631,    13.34,    3.57,    1.57,    72.87,    0.61,    7.89,    0.00,    0.00,    2},
    {75,     1.51596,    13.02,    3.56,    1.54,    73.11,    0.72,    7.90,    0.00,    0.00,    2},
    {76,     1.51590,    13.02,    3.58,    1.51,    73.12,    0.69,    7.96,    0.00,    0.00,    2},
    {77,     1.51645,    13.44,    3.61,    1.54,    72.39,    0.66,    8.03,    0.00,    0.00,    2},
    {78,     1.51627,    13.00,    3.58,    1.54,    72.83,    0.61,    8.04,    0.00,    0.00,    2},
    {79,     1.51613,    13.92,    3.52,    1.25,    72.88,    0.37,    7.94,    0.00,    0.14,    2},
    {80,     1.51590,    12.82,    3.52,    1.90,    72.86,    0.69,    7.97,    0.00,    0.00,    2},
    {81,     1.51592,    12.86,    3.52,    2.12,    72.66,    0.69,    7.97,    0.00,    0.00,    2},
    {82,     1.51593,    13.25,    3.45,    1.43,    73.17,    0.61,    7.86,    0.00,    0.00,    2},
    {83,     1.51646,    13.41,    3.55,    1.25,    72.81,    0.68,    8.10,    0.00,    0.00,    2},
    {84,     1.51594,    13.09,    3.52,    1.55,    72.87,    0.68,    8.05,    0.00,    0.09,    2},
    {85,     1.51409,    14.25,    3.09,    2.08,    72.28,    1.10,    7.08,    0.00,    0.00,    2},
    {86,     1.51625,    13.36,    3.58,    1.49,    72.72,    0.45,    8.21,    0.00,    0.00,    2},
    {87,     1.51569,    13.24,    3.49,    1.47,    73.25,    0.38,    8.03,    0.00,    0.00,    2},
    {88,     1.51645,    13.40,    3.49,    1.52,    72.65,    0.67,    8.08,    0.00,    0.10,    2},
    {89,     1.51618,    13.01,    3.50,    1.48,    72.89,    0.60,    8.12,    0.00,    0.00,    2},
    {90,     1.51640,    12.55,    3.48,    1.87,    73.23,    0.63,    8.08,    0.00,    0.09,    2},
    {91,     1.51841,    12.93,    3.74,    1.11,    72.28,    0.64,    8.96,    0.00,    0.22,    2},
    {92,     1.51605,    12.90,    3.44,    1.45,    73.06,    0.44,    8.27,    0.00,    0.00,    2},
    {93,     1.51588,    13.12,    3.41,    1.58,    73.26,    0.07,    8.39,    0.00,    0.19,    2},
    {94,     1.51590,    13.24,    3.34,    1.47,    73.10,    0.39,    8.22,    0.00,    0.00,    2},
    {95,     1.51629,    12.71,    3.33,    1.49,    73.28,    0.67,    8.24,    0.00,    0.00,    2},
    {96,     1.51860,    13.36,    3.43,    1.43,    72.26,    0.51,    8.60,    0.00,    0.00,    2},
    {97,     1.51841,    13.02,    3.62,    1.06,    72.34,    0.64,    9.13,    0.00,    0.15,    2},
    {98,     1.51743,    12.20,    3.25,    1.16,    73.55,    0.62,    8.90,    0.00,    0.24,    2},
    {99,     1.51689,    12.67,    2.88,    1.71,    73.21,    0.73,    8.54,    0.00,    0.00,    2},
    {100,    1.51811,    12.96,    2.96,    1.43,    72.92,    0.60,    8.79,    0.14,    0.00,    2},
    {101,    1.51655,    12.75,    2.85,    1.44,    73.27,    0.57,    8.79,    0.11,    0.22,    2},
    {102,    1.51730,    12.35,    2.72,    1.63,    72.87,    0.70,    9.23,    0.00,    0.00,    2},
    {103,    1.51820,    12.62,    2.76,    0.83,    73.81,    0.35,    9.42,    0.00,    0.20,    2},
    {104,    1.52725,    13.80,    3.15,    0.66,    70.57,    0.08,    11.64,   0.00,    0.00,    2},
    {105,    1.52410,    13.83,    2.90,    1.17,    71.15,    0.08,    10.79,   0.00,    0.00,    2},
    {106,    1.52475,    11.45,    0.00,    1.88,    72.19,    0.81,    13.24,   0.00,    0.34,    2},
    {107,    1.53125,    10.73,    0.00,    2.10,    69.81,    0.58,    13.30,   3.15,    0.28,    2},
    {108,    1.53393,    12.30,    0.00,    1.00,    70.16,    0.12,    16.19,   0.00,    0.24,    2},
    {109,    1.52222,    14.43,    0.00,    1.00,    72.67,    0.10,    11.52,   0.00,    0.08,    2},
    {110,    1.51818,    13.72,    0.00,    0.56,    74.45,    0.00,    10.99,   0.00,    0.00,    2},
    {111,    1.52664,    11.23,    0.00,    0.77,    73.21,    0.00,    14.68,   0.00,    0.00,    2},
    {112,    1.52739,    11.02,    0.00,    0.75,    73.08,    0.00,    14.96,   0.00,    0.00,    2},
    {113,    1.52777,    12.64,    0.00,    0.67,    72.02,    0.06,    14.40,   0.00,    0.00,    2},
    {114,    1.51892,    13.46,    3.83,    1.26,    72.55,    0.57,    8.21,    0.00,    0.14,    2},
    {115,    1.51847,    13.10,    3.97,    1.19,    72.44,    0.60,    8.43,    0.00,    0.00,    2},
    {116,    1.51846,    13.41,    3.89,    1.33,    72.38,    0.51,    8.28,    0.00,    0.00,    2},
    {117,    1.51829,    13.24,    3.90,    1.41,    72.33,    0.55,    8.31,    0.00,    0.10,    2},
    {118,    1.51708,    13.72,    3.68,    1.81,    72.06,    0.64,    7.88,    0.00,    0.00,    2},
    {119,    1.51673,    13.30,    3.64,    1.53,    72.53,    0.65,    8.03,    0.00,    0.29,    2},
    {120,    1.51652,    13.56,    3.57,    1.47,    72.45,    0.64,    7.96,    0.00,    0.00,    2},
    {121,    1.51844,    13.25,    3.76,    1.32,    72.40,    0.58,    8.42,    0.00,    0.00,    2},
    {122,    1.51663,    12.93,    3.54,    1.62,    72.96,    0.64,    8.03,    0.00,    0.21,    2},
    {123,    1.51687,    13.23,    3.54,    1.48,    72.84,    0.56,    8.10,    0.00,    0.00,    2},
    {124,    1.51707,    13.48,    3.48,    1.71,    72.52,    0.62,    7.99,    0.00,    0.00,    2},
    {125,    1.52177,    13.20,    3.68,    1.15,    72.75,    0.54,    8.52,    0.00,    0.00,    2},
    {126,    1.51872,    12.93,    3.66,    1.56,    72.51,    0.58,    8.55,    0.00,    0.12,    2},
    {127,    1.51667,    12.94,    3.61,    1.26,    72.75,    0.56,    8.60,    0.00,    0.00,    2},
    {128,    1.52081,    13.78,    2.28,    1.43,    71.99,    0.49,    9.85,    0.00,    0.17,    2},
    {129,    1.52068,    13.55,    2.09,    1.67,    72.18,    0.53,    9.57,    0.27,    0.17,    2},
    {130,    1.52020,    13.98,    1.35,    1.63,    71.76,    0.39,    10.56,   0.00,    0.18,    2},
    {131,    1.52177,    13.75,    1.01,    1.36,    72.19,    0.33,    11.14,   0.00,    0.00,    2},
    {132,    1.52614,    13.70,    0.00,    1.36,    71.24,    0.19,    13.44,   0.00,    0.10,    2},
    {133,    1.51813,    13.43,    3.98,    1.18,    72.49,    0.58,    8.15,    0.00,    0.00,    2},
    {134,    1.51800,    13.71,    3.93,    1.54,    71.81,    0.54,    8.21,    0.00,    0.15,    2},
    {135,    1.51811,    13.33,    3.85,    1.25,    72.78,    0.52,    8.12,    0.00,    0.00,    2},
    {136,    1.51789,    13.19,    3.90,    1.30,    72.33,    0.55,    8.44,    0.00,    0.28,    2},
    {137,    1.51806,    13.00,    3.80,    1.08,    73.07,    0.56,    8.38,    0.00,    0.12,    2},
    {138,    1.51711,    12.89,    3.62,    1.57,    72.96,    0.61,    8.11,    0.00,    0.00,    2},
    {139,    1.51674,    12.79,    3.52,    1.54,    73.36,    0.66,    7.90,    0.00,    0.00,    2},
    {140,    1.51674,    12.87,    3.56,    1.64,    73.14,    0.65,    7.99,    0.00,    0.00,    2},
    {141,    1.51690,    13.33,    3.54,    1.61,    72.54,    0.68,    8.11,    0.00,    0.00,    2},
    {142,    1.51851,    13.20,    3.63,    1.07,    72.83,    0.57,    8.41,    0.09,    0.17,    2},
    {143,    1.51662,    12.85,    3.51,    1.44,    73.01,    0.68,    8.23,    0.06,    0.25,    2},
    {144,    1.51709,    13.00,    3.47,    1.79,    72.72,    0.66,    8.18,    0.00,    0.00,    2},
    {145,    1.51660,    12.99,    3.18,    1.23,    72.97,    0.58,    8.81,    0.00,    0.24,    2},
    {146,    1.51839,    12.85,    3.67,    1.24,    72.57,    0.62,    8.68,    0.00,    0.35,    2},
    {147,    1.51769,    13.65,    3.66,    1.11,    72.77,    0.11,    8.60,    0.00,    0.00,    3},
    {148,    1.51610,    13.33,    3.53,    1.34,    72.67,    0.56,    8.33,    0.00,    0.00,    3},
    {149,    1.51670,    13.24,    3.57,    1.38,    72.70,    0.56,    8.44,    0.00,    0.10,    3},
    {150,    1.51643,    12.16,    3.52,    1.35,    72.89,    0.57,    8.53,    0.00,    0.00,    3},
    {151,    1.51665,    13.14,    3.45,    1.76,    72.48,    0.60,    8.38,    0.00,    0.17,    3},
    {152,    1.52127,    14.32,    3.90,    0.83,    71.50,    0.00,    9.49,    0.00,    0.00,    3},
    {153,    1.51779,    13.64,    3.65,    0.65,    73.00,    0.06,    8.93,    0.00,    0.00,    3},
    {154,    1.51610,    13.42,    3.40,    1.22,    72.69,    0.59,    8.32,    0.00,    0.00,    3},
    {155,    1.51694,    12.86,    3.58,    1.31,    72.61,    0.61,    8.79,    0.00,    0.00,    3},
    {156,    1.51646,    13.04,    3.40,    1.26,    73.01,    0.52,    8.58,    0.00,    0.00,    3},
    {157,    1.51655,    13.41,    3.39,    1.28,    72.64,    0.52,    8.65,    0.00,    0.00,    3},
    {158,    1.52121,    14.03,    3.76,    0.58,    71.79,    0.11,    9.65,    0.00,    0.00,    3},
    {159,    1.51776,    13.53,    3.41,    1.52,    72.04,    0.58,    8.79,    0.00,    0.00,    3},
    {160,    1.51796,    13.50,    3.36,    1.63,    71.94,    0.57,    8.81,    0.00,    0.09,    3},
    {161,    1.51832,    13.33,    3.34,    1.54,    72.14,    0.56,    8.99,    0.00,    0.00,    3},
    {162,    1.51934,    13.64,    3.54,    0.75,    72.65,    0.16,    8.89,    0.15,    0.24,    3},
    {163,    1.52211,    14.19,    3.78,    0.91,    71.36,    0.23,    9.14,    0.00,    0.37,    3},
    {164,    1.51514,    14.01,    2.68,    3.50,    69.89,    1.68,    5.87,    2.20,    0.00,    5},
    {165,    1.51915,    12.73,    1.85,    1.86,    72.69,    0.60,    10.09,   0.00,    0.00,    5},
    {166,    1.52171,    11.56,    1.88,    1.56,    72.86,    0.47,    11.41,   0.00,    0.00,    5},
    {167,    1.52151,    11.03,    1.71,    1.56,    73.44,    0.58,    11.62,   0.00,    0.00,    5},
    {168,    1.51969,    12.64,    0.00,    1.65,    73.75,    0.38,    11.53,   0.00,    0.00,    5},
    {169,    1.51666,    12.86,    0.00,    1.83,    73.88,    0.97,    10.17,   0.00,    0.00,    5},
    {170,    1.51994,    13.27,    0.00,    1.76,    73.03,    0.47,    11.32,   0.00,    0.00,    5},
    {171,    1.52369,    13.44,    0.00,    1.58,    72.22,    0.32,    12.24,   0.00,    0.00,    5},
    {172,    1.51316,    13.02,    0.00,    3.04,    70.48,    6.21,    6.96,    0.00,    0.00,    5},
    {173,    1.51321,    13.00,    0.00,    3.02,    70.70,    6.21,    6.93,    0.00,    0.00,    5},
    {174,    1.52043,    13.38,    0.00,    1.40,    72.25,    0.33,    12.50,   0.00,    0.00,    5},
    {175,    1.52058,    12.85,    1.61,    2.17,    72.18,    0.76,    9.70,    0.24,    0.51,    5},
    {176,    1.52119,    12.97,    0.33,    1.51,    73.39,    0.13,    11.27,   0.00,    0.28,    5},
    {177,    1.51905,    14.00,    2.39,    1.56,    72.37,    0.00,    9.57,    0.00,    0.00,    6},
    {178,    1.51937,    13.79,    2.41,    1.19,    72.76,    0.00,    9.77,    0.00,    0.00,    6},
    {179,    1.51829,    14.46,    2.24,    1.62,    72.38,    0.00,    9.26,    0.00,    0.00,    6},
    {180,    1.51852,    14.09,    2.19,    1.66,    72.67,    0.00,    9.32,    0.00,    0.00,    6},
    {181,    1.51299,    14.40,    1.74,    1.54,    74.55,    0.00,    7.59,    0.00,    0.00,    6},
    {182,    1.51888,    14.99,    0.78,    1.74,    72.50,    0.00,    9.95,    0.00,    0.00,    6},
    {183,    1.51916,    14.15,    0.00,    2.09,    72.74,    0.00,    10.88,   0.00,    0.00,    6},
    {184,    1.51969,    14.56,    0.00,    0.56,    73.48,    0.00,    11.22,   0.00,    0.00,    6},
    {185,    1.51115,    17.38,    0.00,    0.34,    75.41,    0.00,    6.65,    0.00,    0.00,    6},
    {186,    1.51131,    13.69,    3.20,    1.81,    72.81,    1.76,    5.43,    1.19,    0.00,    7},
    {187,    1.51838,    14.32,    3.26,    2.22,    71.25,    1.46,    5.79,    1.63,    0.00,    7},
    {188,    1.52315,    13.44,    3.34,    1.23,    72.38,    0.60,    8.83,    0.00,    0.00,    7},
    {189,    1.52247,    14.86,    2.20,    2.06,    70.26,    0.76,    9.76,    0.00,    0.00,    7},
    {190,    1.52365,    15.79,    1.83,    1.31,    70.43,    0.31,    8.61,    1.68,    0.00,    7},
    {191,    1.51613,    13.88,    1.78,    1.79,    73.10,    0.00,    8.67,    0.76,    0.00,    7},
    {192,    1.51602,    14.85,    0.00,    2.38,    73.28,    0.00,    8.76,    0.64,    0.09,    7},
    {193,    1.51623,    14.20,    0.00,    2.79,    73.46,    0.04,    9.04,    0.40,    0.09,    7},
    {194,    1.51719,    14.75,    0.00,    2.00,    73.02,    0.00,    8.53,    1.59,    0.08,    7},
    {195,    1.51683,    14.56,    0.00,    1.98,    73.29,    0.00,    8.52,    1.57,    0.07,    7},
    {196,    1.51545,    14.14,    0.00,    2.68,    73.39,    0.08,    9.07,    0.61,    0.05,    7},
    {197,    1.51556,    13.87,    0.00,    2.54,    73.23,    0.14,    9.41,    0.81,    0.01,    7},
    {198,    1.51727,    14.70,    0.00,    2.34,    73.28,    0.00,    8.95,    0.66,    0.00,    7},
    {199,    1.51531,    14.38,    0.00,    2.66,    73.10,    0.04,    9.08,    0.64,    0.00,    7},
    {200,    1.51609,    15.01,    0.00,    2.51,    73.05,    0.05,    8.83,    0.53,    0.00,    7},
    {201,    1.51508,    15.15,    0.00,    2.25,    73.50,    0.00,    8.34,    0.63,    0.00,    7},
    {202,    1.51653,    11.95,    0.00,    1.19,    75.18,    2.70,    8.93,    0.00,    0.00,    7},
    {203,    1.51514,    14.85,    0.00,    2.42,    73.72,    0.00,    8.39,    0.56,    0.00,    7},
    {204,    1.51658,    14.80,    0.00,    1.99,    73.11,    0.00,    8.28,    1.71,    0.00,    7},
    {205,    1.51617,    14.95,    0.00,    2.27,    73.30,    0.00,    8.71,    0.67,    0.00,    7},
    {206,    1.51732,    14.95,    0.00,    1.80,    72.99,    0.00,    8.61,    1.55,    0.00,    7},
    {207,    1.51645,    14.94,    0.00,    1.87,    73.11,    0.00,    8.67,    1.38,    0.00,    7},
    {208,    1.51831,    14.39,    0.00,    1.82,    72.86,    1.41,    6.47,    2.88,    0.00,    7},
    {209,    1.51640,    14.37,    0.00,    2.74,    72.85,    0.00,    9.45,    0.54,    0.00,    7},
    {210,    1.51623,    14.14,    0.00,    2.88,    72.61,    0.08,    9.18,    1.06,    0.00,    7},
    {211,    1.51685,    14.92,    0.00,    1.99,    73.06,    0.00,    8.40,    1.59,    0.00,    7},
    {212,    1.52065,    14.36,    0.00,    2.02,    73.42,    0.00,    8.44,    1.64,    0.00,    7},
    {213,    1.51651,    14.38,    0.00,    1.94,    73.61,    0.00,    8.48,    1.57,    0.00,    7},
    {214,    1.51711,    14.23,    0.00,    2.08,    73.36,    0.00,    8.62,    1.67,    0.00,    7}
};

//Hepatitis DataSet Informations.
#define NumberOfInstanceInHepatitisDataSet 80
#define NumberOfAttributeInHepatitisDataSet 19
#define NumberOfClassInHepatitisDataSet 1
int NumberOfCategoryOfEachAttributeValueInHepatitisDataSet[NumberOfAttributeInHepatitisDataSet]={
    10, 2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  10, 10, 10, 10, 10, 2
};
#define NumberOfCategoryOfClassInHepatitisDataSet 2
int DataTypeOfEachAttributeInHepatitisDataSet[NumberOfAttributeInHepatitisDataSet]={
    1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  0
};//1 for continuous data, 0 for discrete data.
double HepatitisDataSet[NumberOfInstanceInHepatitisDataSet][IdentificationNonExistence+NumberOfAttributeInHepatitisDataSet+NumberOfClassInHepatitisDataSet]={
    {59,    1,    1,    2,    1,    1,    2,    2,    1,    1,    1,    2,    2,    1.5,    107,    157,    3.6,    38,     2,    1},
    {47,    1,    2,    2,    2,    2,    2,    2,    2,    2,    1,    2,    1,    2,      84,     23,     4.2,    66,     2,    1},
    {48,    1,    1,    2,    1,    1,    2,    2,    1,    2,    1,    1,    1,    4.8,    123,    157,    2.7,    31,     2,    1},
    {47,    1,    2,    2,    1,    1,    2,    2,    1,    2,    2,    1,    1,    1.7,    86,     20,     2.1,    46,     2,    1},
    {33,    1,    1,    2,    1,    1,    2,    2,    2,    2,    2,    1,    2,    0.7,    63,     80,     3,      31,     2,    1},
    {42,    1,    1,    1,    1,    1,    2,    2,    2,    2,    1,    2,    2,    0.5,    62,     68,     3.8,    29,     2,    1},
    {50,    1,    2,    2,    1,    2,    2,    2,    1,    1,    2,    1,    1,    2.8,    155,    75,     2.4,    32,     2,    1},
    {57,    1,    1,    2,    1,    1,    2,    2,    2,    2,    1,    1,    2,    4.6,    82,     55,     3.3,    30,     2,    1},
    {38,    1,    1,    2,    2,    2,    2,    2,    1,    2,    2,    2,    2,    0.4,    243,    49,     3.8,    90,     2,    1},
    {47,    1,    2,    2,    1,    1,    2,    2,    1,    2,    1,    1,    1,    1,      166,    30,     2.6,    31,     2,    1},
    {49,    1,    1,    2,    1,    1,    2,    2,    2,    1,    1,    2,    2,    1.4,    85,     70,     3.5,    35,     2,    1},
    {43,    1,    2,    2,    1,    2,    2,    2,    2,    1,    1,    1,    2,    1.2,    100,    19,     3.1,    42,     2,    1},
    {39,    1,    1,    1,    1,    1,    2,    2,    1,    2,    2,    2,    2,    2.3,    280,    98,     3.8,    40,     1,    1},
    {38,    1,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    0.7,    53,     42,     4.1,    85,     2,    2},
    {65,    1,    2,    2,    1,    1,    2,    2,    1,    1,    1,    1,    2,    0.3,    180,    53,     2.9,    74,     2,    2},
    {38,    1,    1,    2,    1,    1,    1,    1,    1,    2,    2,    2,    2,    0.6,    76,     18,     4.4,    84,     2,    2},
    {50,    2,    1,    2,    1,    2,    2,    1,    1,    1,    1,    2,    2,    0.9,    230,    117,    3.4,    41,     2,    2},
    {40,    1,    1,    1,    1,    1,    1,    1,    1,    2,    2,    2,    2,    0.6,    40,     69,     4.2,    67,     2,    2},
    {30,    1,    1,    2,    1,    1,    2,    2,    1,    2,    1,    2,    2,    0.8,    147,    128,    3.9,    100,    2,    2},
    {27,    1,    1,    2,    1,    2,    2,    2,    1,    2,    2,    2,    2,    2.4,    168,    227,    3,      66,     2,    2},
    {51,    1,    1,    2,    1,    1,    1,    2,    1,    1,    1,    2,    1,    4.6,    215,    269,    3.9,    51,     2,    2},
    {54,    1,    1,    1,    2,    2,    2,    1,    1,    2,    2,    2,    2,    1,      155,    225,    3.6,    67,     2,    2},
    {50,    1,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    1,      139,    81,     3.9,    62,     2,    2},
    {20,    1,    1,    2,    1,    1,    1,    2,    2,    2,    1,    1,    2,    1,      160,    118,    2.9,    23,     2,    2},
    {50,    1,    2,    2,    2,    2,    2,    2,    1,    1,    1,    2,    2,    1,      85,     75,     4,      72,     2,    2},
    {34,    2,    2,    2,    1,    1,    1,    1,    1,    2,    1,    2,    2,    0.7,    70,     24,     4.1,    100,    2,    2},
    {54,    1,    1,    2,    1,    1,    2,    2,    2,    2,    2,    1,    2,    1.2,    85,     92,     3.1,    66,     2,    2},
    {54,    1,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    1,      85,     30,     4.5,    0,      2,    2},
    {72,    1,    2,    1,    1,    2,    2,    2,    1,    2,    2,    2,    2,    1,      115,    52,     3.4,    50,     2,    2},
    {25,    1,    2,    2,    1,    2,    2,    1,    1,    1,    1,    1,    1,    1.3,    181,    181,    4.5,    57,     2,    2},
    {38,    1,    2,    2,    2,    2,    2,    2,    1,    2,    1,    2,    1,    1.6,    130,    140,    3.5,    56,     2,    2},
    {45,    1,    2,    1,    2,    2,    2,    2,    2,    2,    2,    2,    2,    1.3,    85,     44,     4.2,    85,     2,    2},
    {31,    1,    1,    2,    1,    2,    2,    2,    2,    2,    2,    2,    2,    1.2,    75,     173,    4.2,    54,     2,    2},
    {53,    2,    1,    2,    1,    2,    2,    2,    2,    1,    1,    2,    1,    1.5,    81,     19,     4.1,    48,     2,    2},
    {34,    1,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    0.9,    95,     28,     4,      75,     1,    2},
    {39,    1,    1,    1,    2,    2,    2,    1,    1,    2,    2,    2,    2,    1.3,    78,     30,     4.4,    85,     1,    2},
    {32,    1,    2,    1,    1,    2,    2,    2,    1,    2,    1,    2,    2,    1,      59,     249,    3.7,    54,     1,    2},
    {41,    1,    2,    1,    1,    2,    2,    2,    1,    2,    2,    2,    2,    0.9,    81,     60,     3.9,    52,     1,    2},
    {30,    1,    2,    2,    1,    2,    2,    2,    1,    2,    2,    2,    2,    2.2,    57,     144,    4.9,    78,     1,    2},
    {38,    1,    1,    2,    1,    1,    1,    2,    2,    2,    2,    1,    2,    2,      72,     89,     2.9,    46,     1,    2},
    {40,    1,    1,    2,    1,    2,    2,    2,    1,    2,    2,    2,    2,    0.6,    62,     166,    4,      63,     1,    2},
    {38,    1,    1,    1,    2,    2,    2,    1,    1,    2,    2,    2,    2,    0.7,    70,     28,     4.2,    62,     1,    2},
    {22,    2,    2,    1,    1,    2,    2,    2,    2,    2,    2,    2,    2,    0.9,    48,     20,     4.2,    64,     1,    2},
    {27,    1,    2,    2,    1,    1,    1,    1,    1,    1,    1,    2,    2,    1.2,    133,    98,     4.1,    39,     1,    2},
    {31,    1,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    1,      85,     20,     4,      100,    1,    2},
    {42,    1,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    0.9,    60,     63,     4.7,    47,     1,    2},
    {25,    2,    1,    1,    2,    2,    2,    2,    2,    2,    2,    2,    2,    0.4,    45,     18,     4.3,    70,     1,    2},
    {27,    1,    1,    2,    1,    1,    2,    2,    2,    2,    2,    2,    2,    0.8,    95,     46,     3.8,    100,    1,    2},
    {58,    2,    2,    2,    1,    2,    2,    2,    1,    2,    1,    2,    2,    1.4,    175,    55,     2.7,    36,     1,    2},
    {61,    1,    1,    2,    1,    2,    2,    1,    1,    2,    2,    2,    2,    1.3,    78,     25,     3.8,    100,    1,    2},
    {51,    1,    1,    1,    1,    1,    2,    2,    2,    2,    2,    2,    2,    1,      78,     58,     4.6,    52,     1,    2},
    {41,    2,    2,    1,    1,    1,    1,    2,    2,    2,    2,    2,    2,    0.7,    81,     53,     5,      74,     1,    2},
    {26,    2,    1,    2,    2,    2,    2,    2,    1,    2,    2,    2,    2,    0.5,    135,    29,     3.8,    60,     1,    2},
    {35,    1,    2,    2,    1,    2,    2,    2,    2,    2,    2,    2,    2,    0.9,    58,     92,     4.3,    73,     1,    2},
    {23,    1,    2,    2,    1,    1,    1,    2,    2,    1,    2,    2,    2,    1.3,    194,    150,    4.1,    90,     1,    2},
    {42,    1,    1,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    1,      85,     14,     4,      100,    1,    2},
    {52,    1,    1,    1,    2,    2,    2,    2,    2,    2,    2,    2,    2,    0.7,    75,     55,     4,      21,     1,    2},
    {33,    1,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    1,      46,     90,     4.4,    60,     1,    2},
    {56,    1,    1,    2,    1,    2,    2,    2,    2,    2,    2,    2,    2,    0.7,    71,     18,     4.4,    100,    1,    2},
    {28,    2,    2,    2,    1,    1,    2,    2,    1,    2,    2,    2,    2,    1.8,    191,    420,    3.3,    46,     1,    2},
    {36,    1,    1,    2,    2,    2,    2,    2,    2,    1,    2,    2,    2,    0.8,    85,     44,     4.2,    85,     1,    2},
    {38,    1,    2,    1,    1,    1,    1,    2,    2,    2,    1,    2,    2,    0.7,    125,    65,     4.2,    77,     1,    2},
    {44,    1,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    0.6,    110,    145,    4.4,    70,     1,    2},
    {40,    1,    2,    1,    1,    2,    2,    2,    1,    1,    2,    2,    2,    1.2,    85,     31,     4,      100,    1,    2},
    {30,    1,    2,    2,    1,    2,    2,    2,    2,    2,    2,    2,    2,    0.7,    50,     78,     4.2,    74,     1,    2},
    {30,    1,    2,    1,    2,    2,    2,    2,    2,    2,    2,    2,    2,    0.7,    52,     38,     3.9,    52,     1,    2},
    {64,    1,    2,    1,    1,    1,    2,    1,    1,    2,    2,    2,    2,    1,      80,     38,     4.3,    74,     1,    2},
    {37,    1,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    0.7,    26,     58,     4.5,    100,    1,    2},
    {32,    1,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    0.7,    102,    64,     4,      90,     1,    2},
    {32,    1,    2,    2,    1,    1,    1,    2,    2,    2,    1,    2,    1,    3.5,    215,    54,     3.4,    29,     1,    2},
    {36,    1,    1,    2,    2,    2,    2,    1,    1,    1,    2,    2,    2,    0.7,    164,    44,     3.1,    41,     1,    2},
    {49,    1,    2,    2,    1,    1,    2,    2,    2,    2,    2,    2,    2,    0.8,    103,    43,     3.5,    66,     1,    2},
    {39,    1,    2,    2,    1,    2,    2,    2,    2,    2,    2,    2,    2,    1,      34,     15,     4,      54,     1,    2},
    {32,    1,    1,    1,    1,    1,    2,    2,    2,    2,    2,    2,    2,    1,      55,     45,     4.1,    56,     1,    2},
    {34,    2,    1,    1,    2,    2,    2,    2,    1,    2,    2,    2,    2,    0.6,    30,     24,     4,      76,     1,    2},
    {34,    1,    1,    2,    1,    2,    2,    1,    1,    2,    1,    2,    2,    1,      72,     46,     4.4,    57,     1,    2},
    {36,    1,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    0.7,    62,     224,    4.2,    100,    1,    2},
    {30,    1,    1,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    0.7,    100,    31,     4,      100,    1,    2},
    {62,    2,    2,    2,    1,    1,    2,    2,    1,    2,    1,    2,    2,    1.3,    141,    156,    3.9,    58,     1,    2},
    {28,    1,    1,    2,    1,    1,    1,    2,    1,    2,    2,    2,    2,    1.6,    44,     123,    4,      46,     1,    2}
};

//ImageSegementation DataSet Informations.
#define NumberOfInstanceInImageSegementationDataSet 210
#define NumberOfAttributeInImageSegementationDataSet 19
#define NumberOfClassInImageSegementationDataSet 1
int NumberOfCategoryOfEachAttributeValueInImageSegementationDataSet[NumberOfAttributeInImageSegementationDataSet]={
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
};
#define NumberOfCategoryOfClassInImageSegementationDataSet 7
int DataTypeOfEachAttributeInImageSegementationDataSet[NumberOfAttributeInImageSegementationDataSet]={
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
};
double ImageSegementationDataSet[NumberOfInstanceInImageSegementationDataSet][IdentificationNonExistence+NumberOfAttributeInImageSegementationDataSet+NumberOfClassInImageSegementationDataSet]={
    {140.0,    125.0,    9,    0.0,    0.0,    0.2777779,    0.06296301,    0.66666675,    0.31111118,    6.185185,    7.3333335,    7.6666665,    3.5555556,    3.4444444,    4.4444447,    -7.888889,    7.7777777,    0.5456349,    -1.1218182,    1,},
    {188.0,    133.0,    9,    0.0,    0.0,    0.33333334,    0.26666674,    0.5,    0.077777736,    6.6666665,    8.333334,    7.7777777,    3.8888888,    5.0,    3.3333333,    -8.333333,    8.444445,    0.53858024,    -0.92481726,    1,},
    {105.0,    139.0,    9,    0.0,    0.0,    0.27777782,    0.107407436,    0.83333325,    0.52222216,    6.111111,    7.5555553,    7.2222223,    3.5555556,    4.3333335,    3.3333333,    -7.6666665,    7.5555553,    0.5326279,    -0.96594584,    1,},
    {34.0,    137.0,    9,    0.0,    0.0,    0.5000002,    0.16666673,    1.111111,    0.47407418,    5.851852,    7.7777777,    6.4444447,    3.3333333,    5.7777777,    1.7777778,    -7.5555553,    7.7777777,    0.57363313,    -0.74427164,    1,},
    {39.0,    111.0,    9,    0.0,    0.0,    0.72222227,    0.37407416,    0.8888889,    0.4296295,    6.037037,    7.0,    7.6666665,    3.4444444,    2.8888888,    4.888889,    -7.7777777,    7.888889,    0.56291884,    -1.1757725,    1,},
    {16.0,    128.0,    9,    0.0,    0.0,    0.5,    0.077777766,    0.66666675,    0.31111118,    5.5555553,    6.888889,    6.6666665,    3.1111112,    4.0,    3.3333333,    -7.3333335,    7.111111,    0.56150794,    -0.98581076,    1,},
    {26.0,    67.0,    9,    0.11111111,    0.0,    1.0,    0.8888903,    2.4444447,    3.1851847,    20.0,    19.555555,    25.88889,    14.555555,    -1.3333334,    17.666666,    -16.333334,    25.88889,    0.4369392,    -1.6232022,    1,},
    {14.0,    110.0,    9,    0.0,    0.0,    1.7222224,    5.3518505,    2.6666667,    1.0222229,    17.925926,    18.88889,    21.444445,    13.444445,    2.8888888,    10.555555,    -13.444445,    21.444445,    0.36884832,    -1.3450956,    1,},
    {11.0,    108.0,    9,    0.0,    0.0,    1.3333335,    0.80000025,    1.3888888,    0.95185167,    17.666666,    19.0,    21.11111,    12.888889,    4.0,    10.333333,    -14.333333,    21.11111,    0.38875645,    -1.3021333,    1,},
    {85.0,    101.0,    9,    0.0,    0.0,    1.3333334,    1.2888881,    1.2777777,    1.2185181,    21.296297,    21.222221,    26.777779,    15.888889,    -0.22222222,    16.444445,    -16.222221,    26.777779,    0.4047922,    -1.5585992,    1,},
    {18.0,    145.0,    9,    0.0,    0.0,    0.38888896,    0.018518496,    0.6111111,    0.3740741,    3.925926,    5.5555553,    4.0,    2.2222223,    4.888889,    0.22222222,    -5.111111,    5.5555553,    0.6005291,    -0.57094,    1,},
    {23.0,    55.0,    9,    0.0,    0.0,    2.2222216,    3.6740727,    1.7777773,    0.7851852,    23.444445,    21.666666,    31.11111,    17.555555,    -5.3333335,    23.0,    -17.666666,    31.11111,    0.43507022,    -1.7711632,    1,},
    {196.0,    129.0,    9,    0.0,    0.0,    0.83333325,    0.43333334,    0.6666667,    0.17777774,    6.3333335,    7.888889,    7.3333335,    3.7777777,    4.6666665,    3.0,    -7.6666665,    8.222222,    0.54012346,    -0.9327826,    1,},
    {80.0,    116.0,    9,    0.0,    0.0,    1.5,    1.6333328,    1.5555557,    0.87407404,    21.703703,    21.222221,    27.555555,    16.333334,    -1.4444444,    17.555555,    -16.11111,    27.555555,    0.40736422,    -1.6322426,    1,},
    {2.0,    44.0,    9,    0.0,    0.0,    2.1666672,    2.3888876,    2.3888896,    1.5296285,    18.74074,    17.333334,    25.222221,    13.666667,    -4.2222223,    19.444445,    -15.222222,    25.222221,    0.45768142,    -1.7537255,    1,},
    {120.0,    136.0,    9,    0.0,    0.0,    0.61111116,    0.4185187,    1.0000001,    0.4444444,    6.259259,    7.7777777,    7.2222223,    3.7777777,    4.5555553,    2.8888888,    -7.4444447,    8.0,    0.52954143,    -0.92460656,    1,},
    {146.0,    124.0,    9,    0.0,    0.0,    0.4999999,    0.16666664,    0.38888875,    0.107407376,    6.037037,    7.4444447,    7.3333335,    3.3333333,    4.2222223,    3.8888888,    -8.111111,    7.6666665,    0.56349206,    -1.0247301,    1,},
    {23.0,    85.0,    9,    0.0,    0.0,    1.4444445,    1.0518525,    1.777778,    0.96296287,    17.962963,    18.88889,    21.88889,    13.111111,    2.7777777,    11.777778,    -14.555555,    21.88889,    0.39975148,    -1.386867,    1,},
    {138.0,    116.0,    9,    0.0,    0.0,    0.6111111,    0.15185188,    0.4444445,    0.20740739,    6.4814816,    7.5555553,    8.222222,    3.6666667,    3.2222223,    5.2222223,    -8.444445,    8.333334,    0.5591711,    -1.1910701,    1,},
    {229.0,    124.0,    9,    0.0,    0.0,    0.888889,    0.074073985,    0.8888889,    0.3407407,    5.888889,    7.111111,    7.111111,    3.4444444,    3.6666667,    3.6666667,    -7.3333335,    7.5555553,    0.5458554,    -1.0376626,    1,},
    {22.0,    116.0,    9,    0.0,    0.0,    0.38888875,    0.10740741,    0.33333325,    0.13333334,    5.6296296,    6.7777777,    7.0,    3.1111112,    3.4444444,    4.111111,    -7.5555553,    7.3333335,    0.57539684,    -1.0996237,    1,},
    {121.0,    60.0,    9,    0.0,    0.0,    2.277778,    2.329629,    2.888889,    2.8740742,    26.74074,    24.666666,    35.22222,    20.333334,    -6.2222223,    25.444445,    -19.222221,    35.22222,    0.4223002,    -1.776113,    1,},
    {33.0,    149.0,    9,    0.0,    0.0,    0.5555556,    0.25185165,    0.72222227,    0.15185171,    5.4444447,    4.111111,    8.666667,    3.5555556,    -4.0,    9.666667,    -5.6666665,    8.666667,    0.5783389,    -1.9857028,    1,},
    {80.0,    95.0,    9,    0.0,    0.0,    1.2222223,    1.0074079,    0.944444,    0.5518514,    21.407408,    21.333334,    26.666666,    16.222223,    -0.22222222,    15.777778,    -15.555555,    26.666666,    0.39043593,    -1.5673273,    1,},
    {96.0,    84.0,    9,    0.0,    0.0,    1.5000004,    1.2777773,    1.6111107,    2.2851882,    23.851852,    23.555555,    30.0,    18.0,    -0.8888889,    18.444445,    -17.555555,    30.0,    0.39879107,    -1.598867,    1,},
    {145.0,    102.0,    9,    0.0,    0.0,    0.88888866,    0.6074083,    2.611111,    1.4851857,    23.074074,    22.11111,    29.777779,    17.333334,    -2.8888888,    20.11111,    -17.222221,    29.777779,    0.41776258,    -1.6854404,    1,},
    {18.0,    138.0,    9,    0.0,    0.0,    0.88888884,    0.5629629,    0.83333325,    0.29999986,    5.740741,    7.3333335,    6.5555553,    3.3333333,    4.7777777,    2.4444444,    -7.2222223,    7.3333335,    0.5438712,    -0.8621077,    1,},
    {138.0,    133.0,    9,    0.0,    0.0,    0.6666667,    0.44444433,    1.1666666,    0.21111093,    6.4444447,    7.7777777,    7.888889,    3.6666667,    4.0,    4.3333335,    -8.333333,    8.222222,    0.5582011,    -1.0776595,    1,},
    {121.0,    113.0,    9,    0.0,    0.0,    1.722222,    1.5296303,    2.944444,    1.5296295,    20.25926,    20.0,    25.444445,    15.333333,    -0.7777778,    15.555555,    -14.777778,    25.444445,    0.39658895,    -1.5856091,    1,},
    {95.0,    57.0,    9,    0.0,    0.0,    1.8333327,    3.4111106,    2.1111107,    1.7185175,    26.296297,    24.666666,    34.444447,    19.777779,    -4.888889,    24.444445,    -19.555555,    34.444447,    0.42569095,    -1.7390174,    1,},
    {140.0,    25.0,    9,    0.0,    0.0,    0.99999875,    1.4666697,    1.1111107,    0.118517555,    128.0,    117.77778,    142.33334,    123.888885,    -30.666666,    43.0,    -12.333333,    142.33334,    0.17250364,    -2.3545518,    2,},
    {142.0,    33.0,    9,    0.0,    0.0,    0.49999872,    0.62360865,    0.50000125,    0.3496027,    110.59259,    96.77778,    128.66667,    106.333336,    -41.444443,    54.22222,    -12.777778,    128.66667,    0.24777646,    -2.4080186,    2,},
    {66.0,    41.0,    9,    0.0,    0.0,    0.61111194,    0.32773077,    0.38889185,    0.32773316,    109.703705,    95.111115,    128.88889,    105.111115,    -43.77778,    57.555557,    -13.777778,    128.88889,    0.26204562,    -2.404745,    2,},
    {165.0,    99.0,    9,    0.0,    0.0,    0.88889056,    0.47407392,    0.7777786,    0.47407353,    93.40741,    79.0,    118.0,    83.22222,    -43.22222,    73.77778,    -30.555555,    118.0,    0.33041757,    -2.2077565,    2,},
    {228.0,    20.0,    9,    0.0,    0.0,    1.0555547,    0.49065518,    0.8333333,    0.7527733,    125.0,    114.0,    140.55556,    120.44444,    -33.0,    46.666668,    -13.666667,    140.55556,    0.18889166,    -2.348006,    2,},
    {124.0,    29.0,    9,    0.0,    0.0,    1.0000013,    0.7111076,    1.0555534,    0.90741664,    128.44444,    119.22222,    142.88889,    123.22222,    -27.666666,    43.333332,    -15.666667,    142.88889,    0.16561614,    -2.271128,    2,},
    {156.0,    32.0,    9,    0.0,    0.0,    0.77777356,    0.16296418,    2.6111095,    1.0407379,    136.2963,    129.77779,    146.33334,    132.77779,    -19.555555,    30.11111,    -10.555555,    146.33334,    0.113055356,    -2.280755,    2,},
    {21.0,    90.0,    9,    0.0,    0.0,    0.66666794,    0.044444147,    0.7777786,    0.56296283,    113.48148,    105.888885,    128.55556,    106.0,    -22.777779,    45.22222,    -22.444445,    128.55556,    0.17969723,    -2.0978148,    2,},
    {8.0,    39.0,    9,    0.11111111,    0.0,    1.3888906,    1.129629,    1.8333334,    0.699999,    113.37037,    102.55556,    132.0,    105.55556,    -32.444443,    55.88889,    -23.444445,    132.0,    0.22295359,    -2.1981578,    2,},
    {122.0,    11.0,    9,    0.0,    0.0,    1.0,    0.31111577,    2.8888905,    5.051852,    143.44444,    136.88889,    150.88889,    142.55556,    -19.666666,    22.333334,    -2.6666667,    150.88889,    0.09277301,    -2.5216477,    2,},
    {44.0,    79.0,    9,    0.0,    0.0,    0.44444403,    0.34426486,    0.7777786,    0.4036864,    107.74074,    93.888885,    126.55556,    102.77778,    -41.555557,    56.444443,    -14.888889,    126.55556,    0.2580791,    -2.3779652,    2,},
    {7.0,    18.0,    9,    0.0,    0.0,    1.2777786,    0.7296265,    0.9444453,    0.37407914,    138.62962,    133.33334,    147.55556,    135.0,    -15.888889,    26.777779,    -10.888889,    147.55556,    0.096352234,    -2.2146115,    2,},
    {188.0,    42.0,    9,    0.0,    0.0,    0.7777786,    0.5443299,    1.6666679,    1.2649081,    108.92593,    95.666664,    126.22222,    104.888885,    -39.77778,    51.88889,    -12.111111,    126.22222,    0.24193405,    -2.4103878,    2,},
    {152.0,    18.0,    9,    0.0,    0.0,    0.7777774,    0.4554219,    0.55555725,    0.2721644,    112.111115,    97.22222,    130.44444,    108.666664,    -44.666668,    55.0,    -10.333333,    130.44444,    0.2546684,    -2.45498,    2,},
    {120.0,    74.0,    9,    0.0,    0.0,    0.3333346,    0.08888922,    0.50000125,    0.07777796,    101.85185,    89.111115,    123.22222,    93.22222,    -38.22222,    64.111115,    -25.88889,    123.22222,    0.2767844,    -2.2205532,    2,},
    {143.0,    24.0,    9,    0.0,    0.0,    1.2777773,    0.9074056,    0.88888806,    1.1407489,    127.62963,    117.666664,    141.66667,    123.55556,    -29.88889,    42.11111,    -12.222222,    141.66667,    0.16939692,    -2.349252,    2,},
    {181.0,    27.0,    9,    0.0,    0.0,    0.7222214,    0.46296388,    0.5,    0.25555483,    138.07408,    132.55556,    146.55556,    135.11111,    -16.555555,    25.444445,    -8.888889,    146.55556,    0.09626316,    -2.2645319,    2,},
    {107.0,    21.0,    9,    0.0,    0.0,    0.66666156,    0.51639783,    1.1666666,    0.4082483,    126.77778,    115.77778,    141.88889,    122.666664,    -33.0,    45.333332,    -12.333333,    141.88889,    0.18402189,    -2.3703718,    2,},
    {226.0,    83.0,    9,    0.0,    0.0,    0.8888893,    0.5185186,    1.0555521,    0.50740635,    90.62963,    74.55556,    116.888885,    80.44444,    -48.22222,    78.77778,    -30.555555,    116.888885,    0.36206177,    -2.2390528,    2,},
    {93.0,    29.0,    9,    0.0,    0.0,    1.2222239,    1.2296363,    1.3888906,    1.5740819,    128.48148,    119.0,    142.77777,    123.666664,    -28.444445,    42.88889,    -14.444445,    142.77777,    0.16648434,    -2.2977605,    2,},
    {60.0,    52.0,    9,    0.0,    0.0,    0.7222226,    0.5963011,    0.7777774,    0.7407436,    111.62963,    101.0,    129.22223,    104.666664,    -31.88889,    52.77778,    -20.88889,    129.22223,    0.21837935,    -2.2296848,    2,},
    {179.0,    101.0,    9,    0.0,    0.0,    0.44444785,    0.3851871,    0.61110944,    0.32963282,    134.92592,    126.44444,    147.22223,    131.11111,    -25.444445,    36.88889,    -11.444445,    147.22223,    0.14110672,    -2.3287346,    2,},
    {112.0,    30.0,    9,    0.0,    0.0,    0.55555725,    0.2721644,    1.2222227,    0.7200825,    113.25926,    100.77778,    130.11111,    108.888885,    -37.444443,    50.555557,    -13.111111,    130.11111,    0.22538376,    -2.3853076,    2,},
    {103.0,    64.0,    9,    0.0,    0.0,    0.6666667,    0.6992054,    1.3333308,    0.91893595,    108.77778,    96.333336,    126.22222,    103.77778,    -37.333332,    52.333332,    -15.0,    126.22222,    0.2367968,    -2.3554425,    2,},
    {174.0,    50.0,    9,    0.0,    0.0,    1.0000013,    0.7601153,    0.9444453,    0.9525792,    107.44444,    94.666664,    125.77778,    101.888885,    -38.333332,    55.0,    -16.666666,    125.77778,    0.2473368,    -2.3372955,    2,},
    {80.0,    40.0,    9,    0.0,    0.0,    0.6111107,    0.5741323,    0.7222226,    0.7722025,    110.703705,    96.22222,    129.0,    106.888885,    -43.444443,    54.88889,    -11.444445,    129.0,    0.2540513,    -2.4346924,    2,},
    {67.0,    71.0,    9,    0.0,    0.0,    1.6666666,    0.8888911,    1.4999987,    0.29999846,    125.96296,    115.55556,    140.88889,    121.44444,    -31.222221,    44.77778,    -13.555555,    140.88889,    0.17967218,    -2.339758,    2,},
    {92.0,    56.0,    9,    0.0,    0.0,    0.44444275,    0.029629406,    0.8333333,    0.5666677,    126.0,    115.888885,    140.66667,    121.44444,    -30.333334,    44.0,    -13.666667,    140.66667,    0.17606053,    -2.3267827,    2,},
    {67.0,    32.0,    9,    0.0,    0.0,    0.944444,    1.0628421,    1.7777786,    1.3109215,    126.22222,    115.111115,    142.22223,    121.333336,    -33.333332,    48.0,    -14.666667,    142.22223,    0.19062504,    -2.333746,    2,},
    {125.0,    46.0,    9,    0.11111111,    0.0,    0.61110944,    0.61161584,    2.166668,    0.7817352,    124.55556,    112.77778,    141.0,    119.888885,    -35.333332,    49.333332,    -14.0,    141.0,    0.20012376,    -2.357688,    2,},
    {101.0,    121.0,    9,    0.11111111,    0.0,    0.6666667,    0.843274,    1.5,    0.88819396,    3.4074075,    1.1111112,    6.0,    3.1111112,    -6.888889,    7.7777777,    -0.8888889,    6.0,    0.8435185,    -2.5191648,    3,},
    {21.0,    122.0,    9,    0.0,    0.0,    0.44444445,    0.4036867,    0.44444445,    0.4036867,    0.5555556,    0.0,    1.2222222,    0.44444445,    -1.6666666,    2.0,    -0.33333334,    1.2222222,    0.5555556,    -2.4445627,    3,},
    {45.0,    89.0,    9,    0.0,    0.0,    0.7777777,    0.3407409,    0.77777773,    0.47407398,    2.2962964,    0.11111111,    6.4444447,    0.33333334,    -6.5555553,    12.444445,    -5.888889,    6.4444447,    0.9861111,    -2.1239047,    3,},
    {18.0,    87.0,    9,    0.0,    0.0,    1.5555555,    1.9626132,    1.8888887,    1.7469552,    2.925926,    1.2222222,    5.6666665,    1.8888888,    -5.111111,    8.222222,    -3.1111112,    5.6666665,    0.86277056,    -2.2294934,    3,},
    {52.0,    102.0,    9,    0.0,    0.0,    0.72222227,    0.50740725,    0.8333333,    0.5666668,    2.8888888,    0.6666667,    6.3333335,    1.6666666,    -6.6666665,    10.333333,    -3.6666667,    6.3333335,    0.89973545,    -2.2617195,    3,},
    {54.0,    91.0,    9,    0.0,    0.0,    1.4444443,    1.540741,    0.8333333,    0.25555572,    3.2592592,    0.5555556,    8.0,    1.2222222,    -8.111111,    14.222222,    -6.111111,    8.0,    0.94481075,    -2.186723,    3,},
    {80.0,    87.0,    9,    0.0,    0.11111111,    24.388891,    572.9964,    44.722225,    1386.3292,    67.44444,    58.77778,    79.0,    64.55556,    -26.0,    34.666668,    -8.666667,    79.0,    0.30628127,    -2.4221272,    3,},
    {140.0,    124.0,    9,    0.0,    0.0,    1.0,    0.44444454,    1.1111112,    1.0518516,    2.5185184,    0.22222222,    6.111111,    1.2222222,    -6.888889,    10.777778,    -3.8888888,    6.111111,    0.97376543,    -2.267462,    3,},
    {69.0,    139.0,    9,    0.0,    0.0,    2.8333328,    1.7732588,    2.1111112,    1.6688871,    18.074074,    16.0,    22.555555,    15.666667,    -6.2222223,    13.444445,    -7.2222223,    23.88889,    0.38661182,    -1.7028334,    3,},
    {9.0,    80.0,    9,    0.0,    0.0,    2.9444444,    13.751853,    16.666666,    71.5111,    23.62963,    17.333334,    31.666666,    21.88889,    -18.88889,    24.11111,    -5.2222223,    31.666666,    0.5142537,    -2.4315135,    3,},
    {6.0,    81.0,    9,    0.0,    0.11111111,    4.111111,    8.740745,    5.722223,    28.50741,    12.481482,    7.6666665,    18.88889,    10.888889,    -14.444445,    19.222221,    -4.7777777,    18.88889,    0.6281558,    -2.388561,    3,},
    {74.0,    129.0,    9,    0.0,    0.0,    0.22222222,    0.029629637,    0.11111111,    0.029629635,    0.5185185,    0.0,    1.5555556,    0.0,    -1.5555556,    3.1111112,    -1.5555556,    1.5555556,    1.0,    -2.0943952,    3,},
    {41.0,    75.0,    9,    0.0,    0.11111111,    15.388889,    19.136257,    26.611113,    31.71359,    55.0,    47.444443,    65.44444,    52.11111,    -22.666666,    31.333334,    -8.666667,    65.44444,    0.29780185,    -2.3567543,    3,},
    {36.0,    145.0,    9,    0.0,    0.0,    0.2777778,    0.19629629,    1.2777778,    2.0629628,    0.8518519,    0.33333334,    1.4444444,    0.7777778,    -1.5555556,    1.7777778,    -0.22222222,    1.4444444,    0.25185186,    -2.5309503,    3,},
    {94.0,    144.0,    9,    0.0,    0.0,    0.44444442,    0.118518494,    0.49999997,    0.1666667,    1.1481482,    0.0,    3.4444444,    0.0,    -3.4444444,    6.888889,    -3.4444444,    3.4444444,    1.0,    -2.0943952,    3,},
    {18.0,    90.0,    9,    0.0,    0.0,    1.0555555,    0.37407416,    0.6666667,    0.22222227,    2.8148148,    0.5555556,    6.888889,    1.0,    -6.7777777,    12.222222,    -5.4444447,    6.888889,    0.9261464,    -2.1643226,    3,},
    {68.0,    103.0,    9,    0.0,    0.0,    0.66666675,    0.57777774,    1.111111,    0.96296334,    2.148148,    0.11111111,    5.6666665,    0.6666667,    -6.111111,    10.555555,    -4.4444447,    5.6666665,    0.9876543,    -2.1854658,    3,},
    {45.0,    108.0,    9,    0.0,    0.11111111,    25.5,    12.795401,    27.277779,    15.930981,    49.814816,    41.77778,    61.11111,    46.555557,    -24.11111,    33.88889,    -9.777778,    61.11111,    0.35897508,    -2.3604913,    3,},
    {59.0,    99.0,    9,    0.0,    0.0,    0.77777785,    0.8296297,    0.99999994,    0.3555556,    2.0370371,    0.11111111,    5.5555553,    0.44444445,    -5.7777777,    10.555555,    -4.7777777,    5.5555553,    0.9861111,    -2.149743,    3,},
    {67.0,    136.0,    9,    0.0,    0.0,    6.722223,    3.7083488,    2.6666667,    3.1972213,    15.518518,    9.0,    25.333334,    12.222222,    -19.555555,    29.444445,    -9.888889,    25.333334,    0.66081303,    -2.3075109,    3,},
    {226.0,    110.0,    9,    0.0,    0.0,    0.33333334,    0.08888887,    0.49999997,    0.2111111,    1.6666666,    0.11111111,    4.4444447,    0.44444445,    -4.6666665,    8.333333,    -3.6666667,    4.4444447,    0.9777778,    -2.1559837,    3,},
    {231.0,    124.0,    9,    0.0,    0.0,    3.4444447,    14.962965,    1.8333334,    6.4333353,    3.0,    1.4444444,    5.888889,    1.6666666,    -4.6666665,    8.666667,    -4.0,    5.888889,    0.895369,    -2.118937,    3,},
    {103.0,    125.0,    9,    0.0,    0.0,    0.9444445,    0.82775915,    0.83333343,    0.6912146,    1.7777778,    0.44444445,    3.8888888,    1.0,    -4.0,    6.3333335,    -2.3333333,    3.8888888,    0.9238095,    -2.2375617,    3,},
    {1.0,    81.0,    9,    0.0,    0.0,    12.166667,    267.45554,    9.222222,    205.36296,    21.333334,    14.0,    30.555555,    19.444445,    -22.0,    27.666666,    -5.6666665,    30.555555,    0.5952822,    -2.438409,    3,},
    {230.0,    124.0,    9,    0.0,    0.0,    0.2777778,    0.10740743,    0.2777778,    0.15185183,    0.6666667,    0.0,    2.0,    0.0,    -2.0,    4.0,    -2.0,    2.0,    1.0,    -2.0943952,    3,},
    {58.0,    109.0,    9,    0.0,    0.0,    0.8888889,    0.25185165,    2.8333333,    1.677777,    4.296296,    1.4444444,    8.444445,    3.0,    -8.555555,    12.444445,    -3.8888888,    8.444445,    0.8644824,    -2.2837873,    3,},
    {59.0,    120.0,    9,    0.0,    0.0,    2.1666667,    1.9860634,    1.4444441,    1.8698385,    19.074074,    10.555555,    33.11111,    13.555555,    -25.555555,    42.11111,    -16.555555,    33.11111,    0.6812664,    -2.2312608,    3,},
    {140.0,    125.0,    9,    0.0,    0.0,    0.66666657,    0.22222227,    2.6666667,    3.7777781,    3.925926,    1.5555556,    7.7777777,    2.4444444,    -7.111111,    11.555555,    -4.4444447,    7.7777777,    0.85319865,    -2.2342408,    3,},
    {127.0,    143.0,    9,    0.0,    0.0,    1.5,    0.12222214,    0.88888884,    0.60740745,    4.185185,    0.8888889,    9.444445,    2.2222223,    -9.888889,    15.777778,    -5.888889,    9.444445,    0.915376,    -2.2574124,    3,},
    {23.0,    129.0,    9,    0.0,    0.0,    0.5,    0.077777795,    0.38888887,    0.15185186,    0.5185185,    0.0,    1.5555556,    0.0,    -1.5555556,    3.1111112,    -1.5555556,    1.5555556,    0.7777778,    -2.0943952,    3,},
    {191.0,    119.0,    9,    0.0,    0.0,    1.1111107,    1.2938615,    0.9444459,    0.772202,    39.851852,    36.22222,    48.22222,    35.11111,    -10.888889,    25.11111,    -14.222222,    48.22222,    0.27171725,    -2.0059998,    4,},
    {219.0,    80.0,    9,    0.0,    0.0,    1.2777767,    0.3296295,    0.6666667,    0.9333318,    39.703705,    36.333336,    48.22222,    34.555557,    -10.111111,    25.555555,    -15.444445,    48.22222,    0.28296396,    -1.9626464,    4,},
    {136.0,    45.0,    9,    0.0,    0.0,    1.222222,    1.5444059,    2.0555553,    1.5263131,    53.074074,    48.11111,    63.77778,    47.333332,    -14.888889,    32.11111,    -17.222221,    63.77778,    0.25936732,    -2.0459049,    4,},
    {66.0,    160.0,    9,    0.0,    0.0,    3.0000007,    4.044447,    2.777778,    0.4296295,    22.851852,    18.222221,    31.555555,    18.777779,    -13.888889,    26.11111,    -12.222222,    31.555555,    0.4260139,    -2.1387258,    4,},
    {190.0,    105.0,    9,    0.0,    0.0,    1.8888893,    2.2962983,    2.166666,    1.6777797,    45.74074,    41.22222,    56.333332,    39.666668,    -13.555555,    31.777779,    -18.222221,    56.333332,    0.29599184,    -1.9960818,    4,},
    {37.0,    78.0,    9,    0.0,    0.0,    1.0000006,    0.17777735,    2.5555565,    2.8740728,    43.814816,    41.11111,    51.88889,    38.444443,    -8.111111,    24.222221,    -16.11111,    51.88889,    0.25891644,    -1.8860723,    4,},
    {198.0,    127.0,    9,    0.0,    0.0,    2.4444444,    4.385187,    8.555555,    59.54075,    40.74074,    38.0,    48.22222,    36.0,    -8.222222,    22.444445,    -14.222222,    48.22222,    0.24899939,    -1.9083478,    4,},
    {191.0,    101.0,    9,    0.0,    0.0,    1.111112,    0.7793635,    1.1111113,    1.186342,    45.037037,    39.0,    57.11111,    39.0,    -18.11111,    36.22222,    -18.11111,    57.11111,    0.32273299,    -2.0943027,    4,},
    {243.0,    120.0,    9,    0.0,    0.0,    4.4444447,    4.359749,    1.5555547,    1.8338387,    47.851852,    44.77778,    56.333332,    42.444443,    -9.222222,    25.444445,    -16.222221,    56.333332,    0.2453213,    -1.9107349,    4,},
    {230.0,    117.0,    9,    0.0,    0.0,    3.2777786,    0.92895794,    1.4444433,    0.86066324,    39.037037,    33.555557,    49.77778,    33.77778,    -16.444445,    32.22222,    -15.777778,    49.77778,    0.33502588,    -2.1062348,    4,},
    {151.0,    89.0,    9,    0.0,    0.0,    8.388889,    4.577317,    0.72222203,    0.38968238,    31.703703,    27.333334,    41.0,    26.777779,    -13.111111,    27.88889,    -14.777778,    41.0,    0.35127252,    -2.0465415,    4,},
    {176.0,    100.0,    9,    0.0,    0.0,    1.9444441,    0.7740748,    1.4444447,    0.6518514,    55.37037,    50.333332,    66.88889,    48.88889,    -15.111111,    34.555557,    -19.444445,    66.88889,    0.26862052,    -2.00619,    4,},
    {118.0,    126.0,    9,    0.0,    0.0,    0.6666667,    0.39999974,    1.8333336,    2.1222224,    20.555555,    16.11111,    28.666666,    16.88889,    -13.333333,    24.333334,    -11.0,    28.666666,    0.437078,    -2.1588047,    4,},
    {42.0,    57.0,    9,    0.0,    0.0,    1.3888906,    0.97562754,    0.99999875,    0.36514837,    65.703705,    59.444443,    79.44444,    58.22222,    -18.777779,    41.22222,    -22.444445,    79.44444,    0.26677614,    -2.0307028,    4,},
    {217.0,    148.0,    9,    0.0,    0.0,    2.0555556,    2.551854,    1.0555553,    0.5074078,    29.074074,    21.444445,    41.555557,    24.222221,    -22.88889,    37.444443,    -14.555555,    41.555557,    0.4837708,    -2.2379715,    4,},
    {14.0,    146.0,    9,    0.11111111,    0.0,    0.888889,    0.4740738,    1.1111112,    0.7407407,    10.592592,    8.0,    15.666667,    8.111112,    -7.7777777,    15.222222,    -7.4444447,    15.666667,    0.48786426,    -2.1089108,    4,},
    {22.0,    87.0,    9,    0.0,    0.0,    1.8888899,    1.2590423,    1.1666666,    0.62361073,    64.03704,    55.77778,    80.333336,    56.0,    -24.777779,    48.88889,    -24.11111,    80.333336,    0.30969977,    -2.105073,    4,},
    {130.0,    32.0,    9,    0.0,    0.0,    1.1111113,    1.047041,    0.83333397,    0.83665866,    59.48148,    54.22222,    70.88889,    53.333332,    -15.777778,    34.22222,    -18.444445,    70.88889,    0.24900064,    -2.042422,    4,},
    {162.0,    159.0,    9,    0.0,    0.0,    2.1666667,    0.9603238,    2.2222223,    1.4555128,    26.11111,    25.222221,    29.555555,    23.555555,    -2.6666667,    10.333333,    -7.6666665,    29.555555,    0.20284556,    -1.8025542,    4,},
    {150.0,    158.0,    9,    0.0,    0.0,    2.166667,    1.6333338,    1.388889,    0.41851807,    8.444445,    7.0,    12.222222,    6.111111,    -4.3333335,    11.333333,    -7.0,    12.222222,    0.50308645,    -1.9434487,    4,},
    {163.0,    68.0,    9,    0.0,    0.0,    1.833334,    2.21111,    1.5555559,    0.96296287,    56.77778,    52.0,    68.22222,    50.11111,    -14.333333,    34.333332,    -20.0,    68.22222,    0.26505277,    -1.9843078,    4,},
    {187.0,    80.0,    9,    0.0,    0.0,    1.3333327,    0.7111114,    1.3333334,    0.7111086,    40.51852,    37.77778,    47.666668,    36.11111,    -8.222222,    21.444445,    -13.222222,    47.666668,    0.24472968,    -1.942698,    4,},
    {140.0,    73.0,    9,    0.0,    0.0,    1.7222214,    0.8277598,    0.7777774,    1.0036957,    46.296295,    45.666668,    51.11111,    42.11111,    -1.8888888,    14.444445,    -12.555555,    51.11111,    0.1761556,    -1.6815889,    4,},
    {236.0,    117.0,    9,    0.0,    0.0,    0.7777786,    0.40368706,    1.277778,    0.74286777,    45.88889,    39.555557,    58.444443,    39.666668,    -19.0,    37.666668,    -18.666666,    58.444443,    0.33047688,    -2.0994802,    4,},
    {112.0,    90.0,    9,    0.0,    0.0,    7.38889,    6.9455557,    1.2777773,    0.87981415,    65.18519,    57.666668,    79.77778,    58.11111,    -22.555555,    43.77778,    -21.222221,    79.77778,    0.27834544,    -2.108813,    4,},
    {197.0,    121.0,    9,    0.0,    0.0,    21.666666,    17.3628,    0.94444436,    0.9047208,    41.037037,    37.444443,    49.444443,    36.22222,    -10.777778,    25.222221,    -14.444445,    49.444443,    0.28057775,    -1.9955361,    4,},
    {141.0,    17.0,    9,    0.11111111,    0.22222222,    3.7222226,    4.4493027,    5.0,    2.319004,    44.592594,    40.333336,    54.0,    39.444443,    -12.777778,    28.222221,    -15.444445,    54.0,    0.26818594,    -2.030048,    4,},
    {79.0,    28.0,    9,    0.0,    0.0,    4.277777,    3.7618961,    0.8333333,    0.6582806,    62.407406,    53.444443,    79.111115,    54.666668,    -26.88889,    50.11111,    -23.222221,    79.111115,    0.32455578,    -2.1445074,    4,},
    {169.0,    102.0,    9,    0.0,    0.0,    1.0,    0.35555485,    0.8888893,    0.2962955,    58.22222,    53.444443,    69.66667,    51.555557,    -14.333333,    34.333332,    -20.0,    69.66667,    0.25975996,    -1.9855843,    4,},
    {208.0,    65.0,    9,    0.0,    0.0,    1.3888874,    1.2367799,    26.444445,    25.537477,    56.703705,    52.666668,    64.44444,    53.0,    -12.111111,    23.222221,    -11.111111,    64.44444,    0.19713038,    -1.9708116,    4,},
    {189.0,    144.0,    9,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    5,},
    {189.0,    141.0,    9,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    5,},
    {210.0,    153.0,    9,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    5,},
    {57.0,    89.0,    9,    0.0,    0.0,    1.7222222,    1.3066783,    6.1666665,    4.7034264,    17.0,    13.0,    24.555555,    13.444445,    -12.0,    22.666666,    -10.666667,    24.555555,    0.47748852,    -2.1297464,    5,},
    {243.0,    94.0,    9,    0.0,    0.0,    0.6666666,    0.31111112,    0.22222221,    0.029629631,    1.1851852,    0.22222222,    3.2222223,    0.11111111,    -2.8888888,    6.111111,    -3.2222223,    3.2222223,    0.9777778,    -2.0712416,    5,},
    {229.0,    104.0,    9,    0.0,    0.0,    0.49999985,    0.54772234,    2.8333333,    2.0412421,    19.777779,    16.333334,    26.11111,    16.88889,    -10.333333,    19.0,    -8.666667,    26.11111,    0.37553233,    -2.1506376,    5,},
    {226.0,    131.0,    9,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    5,},
    {196.0,    95.0,    9,    0.0,    0.0,    1.722222,    1.1238165,    1.3333335,    1.264911,    7.6296296,    6.7777777,    10.777778,    5.3333335,    -2.5555556,    9.444445,    -6.888889,    10.777778,    0.51256585,    -1.7492584,    5,},
    {43.0,    152.0,    9,    0.0,    0.0,    1.9444445,    1.7074082,    1.2222222,    0.8296299,    1.5185186,    1.0,    2.8888888,    0.6666667,    -1.5555556,    4.111111,    -2.5555556,    2.8888888,    0.64867723,    -1.9332389,    5,},
    {54.0,    133.0,    9,    0.0,    0.0,    1.5555557,    1.0074074,    0.50000006,    0.3444443,    5.3703704,    3.6666667,    9.0,    3.4444444,    -5.111111,    10.888889,    -5.7777777,    9.0,    0.6304714,    -2.0480003,    5,},
    {157.0,    85.0,    9,    0.0,    0.0,    1.2222223,    1.2412657,    0.22222233,    0.17213264,    18.925926,    14.555555,    26.88889,    15.333333,    -13.111111,    23.88889,    -10.777778,    26.88889,    0.45902446,    -2.1609125,    5,},
    {96.0,    94.0,    9,    0.0,    0.0,    0.7222226,    0.28518537,    0.44444466,    0.42963016,    20.222221,    16.0,    28.777779,    15.888889,    -12.666667,    25.666666,    -13.0,    28.777779,    0.45154575,    -2.084893,    5,},
    {152.0,    155.0,    9,    0.0,    0.0,    0.5,    0.61111104,    10.777778,    131.80739,    7.296296,    5.3333335,    11.0,    5.5555553,    -5.888889,    11.111111,    -5.2222223,    11.0,    0.5,    -2.115567,    5,},
    {208.0,    34.0,    9,    0.0,    0.0,    1.7222224,    1.7309811,    0.4444445,    0.50184834,    14.444445,    10.777778,    21.0,    11.555555,    -11.0,    19.666666,    -8.666667,    21.0,    0.479958,    -2.1623826,    5,},
    {222.0,    62.0,    9,    0.0,    0.0,    0.27777782,    0.2509242,    0.6666667,    0.55777335,    6.4074073,    4.111111,    11.444445,    3.6666667,    -6.888889,    15.111111,    -8.222222,    11.444445,    0.68080807,    -2.0341523,    5,},
    {123.0,    152.0,    9,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    5,},
    {20.0,    134.0,    9,    0.0,    0.0,    0.6666667,    0.088888995,    0.61111116,    0.24074072,    2.9629629,    1.1111112,    6.4444447,    1.3333334,    -5.5555553,    10.444445,    -4.888889,    6.4444447,    0.8292328,    -2.133095,    5,},
    {223.0,    62.0,    9,    0.0,    0.0,    0.3333334,    0.29814243,    0.44444442,    0.50184846,    6.4444447,    4.111111,    11.444445,    3.7777777,    -7.0,    15.0,    -8.0,    11.444445,    0.6703704,    -2.0487173,    5,},
    {184.0,    145.0,    9,    0.0,    0.0,    0.72222227,    0.6116159,    0.22222222,    0.2721655,    0.5555556,    0.33333334,    1.2222222,    0.11111111,    -0.6666667,    2.0,    -1.3333334,    1.2222222,    0.5277778,    -1.9209436,    5,},
    {225.0,    58.0,    9,    0.0,    0.0,    0.3333335,    0.42163706,    0.4444445,    0.34426522,    8.333333,    5.5555553,    14.111111,    5.3333335,    -8.333333,    17.333334,    -9.0,    14.111111,    0.62222224,    -2.0685637,    5,},
    {58.0,    113.0,    9,    0.0,    0.0,    3.4444447,    1.2232318,    0.7222223,    0.38968182,    20.851852,    16.88889,    28.444445,    17.222223,    -11.888889,    22.777779,    -10.888889,    28.444445,    0.4148072,    -2.1256926,    5,},
    {160.0,    41.0,    9,    0.0,    0.0,    0.8333333,    0.8096638,    0.22222225,    0.17213258,    0.7037037,    0.5555556,    1.2222222,    0.33333334,    -0.44444445,    1.5555556,    -1.1111112,    1.2222222,    0.537037,    -1.8451205,    5,},
    {160.0,    110.0,    9,    0.0,    0.0,    0.833333,    0.6912145,    0.4444437,    0.2721654,    31.62963,    27.222221,    39.333336,    28.333334,    -13.222222,    23.11111,    -9.888889,    39.333336,    0.3074441,    -2.1872416,    5,},
    {186.0,    12.0,    9,    0.0,    0.0,    0.44444433,    0.27216548,    2.3333333,    1.9663839,    6.259259,    3.8888888,    11.333333,    3.5555556,    -7.111111,    15.222222,    -8.111111,    11.333333,    0.6873016,    -2.057978,    5,},
    {142.0,    111.0,    9,    0.0,    0.0,    1.1111113,    0.45541987,    0.55555534,    0.34426492,    28.74074,    24.555555,    35.88889,    25.777779,    -12.555555,    21.444445,    -8.888889,    35.88889,    0.31548372,    -2.2026672,    5,},
    {252.0,    137.0,    9,    0.0,    0.0,    0.88888884,    0.544331,    0.6111111,    0.71232533,    0.7407407,    0.33333334,    1.7777778,    0.11111111,    -1.2222222,    3.1111112,    -1.8888888,    1.7777778,    0.75,    -2.0076063,    5,},
    {206.0,    61.0,    9,    0.0,    0.0,    0.5555555,    0.40368673,    0.4999999,    0.45946813,    7.0740743,    4.666667,    12.222222,    4.3333335,    -7.2222223,    15.444445,    -8.222222,    12.222222,    0.64589113,    -2.0487173,    5,},
    {239.0,    93.0,    9,    0.0,    0.0,    3.444444,    13.496301,    1.0555555,    0.86296237,    14.407408,    9.888889,    22.88889,    10.444445,    -13.555555,    25.444445,    -11.888889,    22.88889,    0.57700235,    -2.1374934,    5,},
    {207.0,    115.0,    9,    0.0,    0.0,    1.0555555,    0.3296295,    0.16666669,    0.033333343,    1.2222222,    0.44444445,    2.8888888,    0.33333334,    -2.3333333,    5.0,    -2.6666667,    2.8888888,    0.93333334,    -2.0655363,    5,},
    {90.0,    134.0,    9,    0.0,    0.0,    0.38888887,    0.018518528,    0.94444436,    0.1518523,    2.1111112,    1.0,    4.666667,    0.6666667,    -3.3333333,    7.6666665,    -4.3333335,    4.666667,    0.88148147,    -2.0131435,    5,},
    {86.0,    197.0,    9,    0.11111111,    0.11111111,    1.611112,    1.4516907,    1.2777786,    1.1038647,    63.22222,    56.22222,    77.77778,    55.666668,    -21.0,    43.666668,    -22.666666,    77.77778,    0.28533262,    -2.06802,    6,},
    {4.0,    189.0,    9,    0.0,    0.0,    2.0555565,    3.8851852,    11.722221,    114.59634,    26.444445,    23.444445,    33.0,    22.88889,    -9.0,    19.666666,    -10.666667,    33.0,    0.27147257,    -2.1010017,    6,},
    {134.0,    187.0,    9,    0.0,    0.0,    1.8888887,    1.5153537,    2.1111114,    1.7847083,    59.37037,    52.666668,    74.111115,    51.333332,    -20.11111,    44.22222,    -24.11111,    74.111115,    0.30745777,    -2.03348,    6,},
    {252.0,    201.0,    9,    0.0,    0.0,    4.6111107,    5.495115,    5.5555553,    5.795274,    40.296295,    35.77778,    49.0,    36.11111,    -13.555555,    26.11111,    -12.555555,    49.0,    0.2753682,    -2.1758256,    6,},
    {219.0,    176.0,    9,    0.0,    0.11111111,    2.1111119,    1.857917,    5.111111,    2.8414931,    60.296295,    53.333332,    75.66667,    51.88889,    -20.88889,    46.11111,    -25.222221,    75.66667,    0.31446242,    -2.0306482,    6,},
    {205.0,    190.0,    9,    0.0,    0.0,    1.2777773,    0.9981452,    1.6111107,    1.1238158,    49.48148,    44.77778,    60.666668,    43.0,    -14.111111,    33.555557,    -19.444445,    60.666668,    0.29078844,    -1.9875989,    6,},
    {202.0,    193.0,    9,    0.0,    0.0,    1.111112,    0.7503075,    3.3888881,    2.489236,    41.703705,    37.88889,    50.666668,    36.555557,    -11.444445,    26.88889,    -15.444445,    50.666668,    0.27838665,    -1.9929975,    6,},
    {223.0,    161.0,    9,    0.0,    0.0,    1.3888893,    3.040736,    8.999999,    31.022234,    42.037037,    36.0,    52.22222,    37.88889,    -18.11111,    30.555555,    -12.444445,    52.22222,    0.30841646,    -2.282295,    6,},
    {87.0,    196.0,    9,    0.11111111,    0.0,    1.3333321,    0.8692278,    2.222222,    1.6688869,    61.592594,    55.0,    75.66667,    54.11111,    -19.777779,    42.22222,    -22.444445,    75.66667,    0.28752622,    -2.0487363,    6,},
    {105.0,    193.0,    9,    0.0,    0.0,    3.222222,    1.9051597,    2.8888893,    2.1773255,    60.11111,    53.11111,    75.111115,    52.11111,    -21.0,    45.0,    -24.0,    75.111115,    0.30846536,    -2.047766,    6,},
    {77.0,    185.0,    9,    0.0,    0.0,    2.944445,    7.6629586,    6.2222214,    32.118523,    32.555557,    29.222221,    39.666668,    28.777779,    -10.0,    21.333334,    -11.333333,    39.666668,    0.27036038,    -2.0852716,    6,},
    {88.0,    180.0,    9,    0.0,    0.0,    1.4999994,    0.93689823,    3.833332,    2.888675,    50.407406,    45.22222,    62.333332,    43.666668,    -15.555555,    35.77778,    -20.222221,    62.333332,    0.3009182,    -2.0087192,    6,},
    {214.0,    161.0,    9,    0.0,    0.0,    3.7222223,    0.72963357,    11.5,    18.922234,    40.444443,    35.333336,    49.666668,    36.333336,    -15.333333,    27.666666,    -12.333333,    49.666668,    0.29805613,    -2.198939,    6,},
    {198.0,    183.0,    9,    0.0,    0.0,    1.0555547,    1.1816497,    3.3888881,    1.5974506,    54.037037,    48.88889,    66.55556,    46.666668,    -15.444445,    37.555557,    -22.11111,    66.55556,    0.2986217,    -1.9749589,    6,},
    {189.0,    187.0,    9,    0.0,    0.0,    1.2222227,    1.0036974,    3.0555553,    2.3890193,    48.51852,    44.11111,    59.88889,    41.555557,    -13.222222,    34.11111,    -20.88889,    59.88889,    0.30575457,    -1.9474715,    6,},
    {124.0,    191.0,    9,    0.0,    0.0,    3.5000007,    2.7386136,    3.277778,    2.8001328,    59.74074,    52.88889,    74.77778,    51.555557,    -20.555555,    45.11111,    -24.555555,    74.77778,    0.31361094,    -2.03548,    6,},
    {182.0,    186.0,    9,    0.11111111,    0.0,    3.666666,    2.0439608,    1.7777767,    1.2412661,    48.444443,    43.77778,    59.88889,    41.666668,    -14.0,    34.333332,    -20.333334,    59.88889,    0.30452195,    -1.9730555,    6,},
    {151.0,    163.0,    9,    0.0,    0.0,    2.0555556,    2.2851863,    18.166666,    41.988934,    40.0,    34.555557,    48.0,    37.444443,    -16.333334,    24.0,    -7.6666665,    48.11111,    0.2638465,    -2.5174901,    6,},
    {112.0,    197.0,    9,    0.0,    0.0,    4.2222233,    2.9938211,    4.9444447,    3.1227946,    50.333332,    44.666668,    62.22222,    44.11111,    -17.0,    35.666668,    -18.666666,    62.22222,    0.29632849,    -2.0712209,    6,},
    {137.0,    182.0,    9,    0.0,    0.0,    1.8333334,    3.8555553,    3.6111107,    9.218522,    34.925926,    31.444445,    42.88889,    30.444445,    -10.444445,    23.88889,    -13.444445,    42.88889,    0.28575617,    -2.0011246,    6,},
    {4.0,    201.0,    9,    0.0,    0.22222222,    2.722222,    1.6788458,    5.2222214,    3.1245742,    53.703705,    47.11111,    67.22222,    46.77778,    -19.777779,    40.555557,    -20.777779,    67.22222,    0.30885938,    -2.0752265,    6,},
    {235.0,    196.0,    9,    0.0,    0.0,    1.6666666,    1.333334,    2.222222,    1.1482682,    47.25926,    41.77778,    58.555557,    41.444443,    -16.444445,    33.88889,    -17.444445,    58.555557,    0.29423782,    -2.0746155,    6,},
    {167.0,    189.0,    9,    0.0,    0.0,    3.7777774,    2.2377224,    3.7777774,    1.544405,    58.407406,    51.333332,    72.44444,    51.444443,    -21.222221,    42.11111,    -20.88889,    72.44444,    0.29552308,    -2.1013258,    6,},
    {250.0,    176.0,    9,    0.0,    0.11111111,    1.611112,    1.0628399,    3.444444,    1.6953092,    53.666668,    47.11111,    67.66667,    46.22222,    -19.666666,    42.0,    -22.333334,    67.66667,    0.3181372,    -2.0522583,    6,},
    {244.0,    194.0,    9,    0.0,    0.0,    1.722222,    1.14342,    2.277778,    2.03761,    49.74074,    44.444443,    61.666668,    43.11111,    -15.888889,    35.77778,    -19.88889,    61.666668,    0.30085307,    -2.0218375,    6,},
    {178.0,    185.0,    9,    0.0,    0.0,    2.6111119,    1.8063676,    3.1111114,    2.2771008,    49.037037,    44.0,    60.666668,    42.444443,    -15.111111,    34.88889,    -19.777779,    60.666668,    0.30003616,    -2.006186,    6,},
    {229.0,    195.0,    9,    0.0,    0.0,    4.166666,    2.2779152,    4.111111,    2.2476342,    47.703705,    42.444443,    58.88889,    41.77778,    -15.777778,    33.555557,    -17.777779,    58.88889,    0.29027814,    -2.0527046,    6,},
    {5.0,    210.0,    9,    0.0,    0.11111111,    2.1666672,    1.6699982,    4.444444,    2.613356,    51.296295,    45.444443,    64.333336,    44.11111,    -17.555555,    39.11111,    -21.555555,    64.333336,    0.3175664,    -2.0208955,    6,},
    {118.0,    180.0,    9,    0.0,    0.0,    1.9444447,    1.4819913,    3.1111114,    1.0886629,    48.555557,    44.11111,    59.0,    42.555557,    -13.333333,    31.333334,    -18.0,    59.0,    0.27882218,    -1.9960423,    6,},
    {86.0,    193.0,    9,    0.0,    0.0,    3.2777793,    1.6521593,    2.222222,    1.8094397,    61.407406,    53.666668,    76.55556,    54.0,    -23.222221,    45.444443,    -22.222221,    76.55556,    0.29957896,    -2.1093748,    6,},
    {204.0,    156.0,    9,    0.0,    0.0,    0.5000003,    0.27888626,    1.9999996,    0.55777323,    23.703703,    17.333334,    25.444445,    28.333334,    -19.11111,    5.2222223,    13.888889,    28.333334,    0.38903406,    2.8649306,    7,},
    {71.0,    180.0,    9,    0.11111111,    0.0,    1.222222,    0.5629625,    3.0,    1.8666646,    22.333334,    18.333334,    21.444445,    27.222221,    -12.0,    -2.6666667,    14.666667,    27.222221,    0.3273826,    2.4538307,    7,},
    {60.0,    181.0,    9,    0.11111111,    0.0,    1.6666666,    1.2000005,    2.6666667,    2.0888875,    19.62963,    17.11111,    17.88889,    23.88889,    -7.5555553,    -5.2222223,    12.777778,    23.88889,    0.28569087,    2.1891353,    7,},
    {103.0,    216.0,    9,    0.0,    0.0,    0.88888884,    0.6518517,    2.1666663,    1.1444442,    14.555555,    10.888889,    13.666667,    19.11111,    -11.0,    -2.6666667,    13.666667,    19.11111,    0.43169576,    2.4475467,    7,},
    {89.0,    221.0,    9,    0.0,    0.0,    1.3888888,    1.4851848,    1.4444445,    1.5851862,    14.074074,    10.666667,    12.444445,    19.11111,    -10.222222,    -4.888889,    15.111111,    19.11111,    0.44601154,    2.3172119,    7,},
    {8.0,    199.0,    9,    0.0,    0.0,    1.6666671,    0.78881073,    1.3888893,    0.71232533,    15.0,    13.333333,    11.777778,    19.88889,    -5.0,    -9.666667,    14.666667,    19.88889,    0.40888458,    1.9053026,    7,},
    {200.0,    250.0,    9,    0.0,    0.0,    2.2777777,    1.420746,    1.4444445,    1.0255988,    9.222222,    6.5555553,    7.3333335,    13.777778,    -8.0,    -5.6666665,    13.666667,    13.777778,    0.5633903,    2.1929355,    7,},
    {163.0,    166.0,    9,    0.0,    0.0,    1.7777776,    1.0962971,    2.444445,    1.0518519,    16.962963,    12.333333,    16.333334,    22.222221,    -13.888889,    -1.8888888,    15.777778,    22.222221,    0.4462137,    2.5158255,    7,},
    {186.0,    173.0,    9,    0.0,    0.0,    1.4444445,    0.82963055,    2.1111114,    1.9851853,    17.148148,    13.555555,    15.555555,    22.333334,    -10.777778,    -4.7777777,    15.555555,    22.333334,    0.39643326,    2.332739,    7,},
    {2.0,    245.0,    9,    0.0,    0.0,    1.8888888,    2.162963,    3.1666667,    3.2777781,    6.4074073,    6.2222223,    6.0,    7.0,    -0.5555556,    -1.2222222,    1.7777778,    7.2222223,    0.19104938,    1.7566451,    7,},
    {62.0,    223.0,    9,    0.0,    0.0,    2.5,    5.722223,    1.6666666,    2.4444442,    6.6666665,    4.888889,    4.666667,    10.444445,    -5.3333335,    -6.0,    11.333333,    10.444445,    0.5931498,    2.0465877,    7,},
    {242.0,    183.0,    9,    0.0,    0.0,    1.4999999,    0.9368979,    2.1666667,    1.798147,    15.37037,    12.666667,    12.444445,    21.0,    -8.111111,    -8.777778,    16.88889,    21.0,    0.42024404,    2.0758736,    7,},
    {200.0,    215.0,    9,    0.0,    0.0,    1.5555559,    0.95839405,    4.722222,    2.6450515,    23.037037,    17.11111,    22.555555,    29.444445,    -17.777779,    -1.4444444,    19.222221,    29.444445,    0.42076695,    2.5610487,    7,},
    {57.0,    177.0,    9,    0.0,    0.0,    0.94444495,    0.55185163,    1.4444443,    1.71852,    19.592592,    15.777778,    18.444445,    24.555555,    -11.444445,    -3.4444444,    14.888889,    24.555555,    0.3589904,    2.413262,    7,},
    {63.0,    220.0,    9,    0.0,    0.0,    3.055556,    15.2629595,    3.6666667,    6.0888896,    8.185185,    6.5555553,    6.4444447,    11.555555,    -4.888889,    -5.2222223,    10.111111,    11.555555,    0.48671728,    2.0931497,    7,},
    {117.0,    224.0,    9,    0.0,    0.0,    3.0555556,    2.5596585,    3.0555556,    3.0215273,    20.25926,    15.444445,    17.777779,    27.555555,    -14.444445,    -7.4444447,    21.88889,    27.555555,    0.44151622,    2.3041532,    7,},
    {233.0,    211.0,    9,    0.11111111,    0.0,    2.6666667,    6.0888896,    1.6666666,    1.7333333,    15.444445,    12.444445,    15.222222,    18.666668,    -9.0,    -0.6666667,    9.666667,    18.666668,    0.33542147,    2.5549645,    7,},
    {232.0,    175.0,    9,    0.0,    0.0,    1.1666669,    0.62360954,    2.8333333,    2.1679492,    15.37037,    12.444445,    13.555555,    20.11111,    -8.777778,    -5.4444447,    14.222222,    20.11111,    0.38741234,    2.2421958,    7,},
    {29.0,    195.0,    9,    0.0,    0.0,    0.44444433,    0.40368652,    0.61111087,    0.6804136,    16.037037,    14.444445,    13.333333,    20.333334,    -4.7777777,    -8.111111,    12.888889,    20.333334,    0.34230694,    1.9430399,    7,},
    {63.0,    201.0,    9,    0.0,    0.0,    1.4444445,    0.9185186,    0.94444424,    0.5518518,    7.7777777,    6.2222223,    5.5555553,    11.555555,    -4.6666665,    -6.6666665,    11.333333,    11.555555,    0.54320127,    1.9829868,    7,},
    {93.0,    236.0,    9,    0.11111111,    0.0,    1.7777777,    2.6962965,    1.9999999,    0.93333334,    12.518518,    9.555555,    10.777778,    17.222223,    -8.888889,    -5.2222223,    14.111111,    17.222223,    0.44724658,    2.2671974,    7,},
    {72.0,    191.0,    9,    0.11111111,    0.0,    1.2777777,    0.5074075,    3.1111114,    4.6074066,    15.185185,    12.111111,    14.888889,    18.555555,    -9.222222,    -0.8888889,    10.111111,    18.555555,    0.3503698,    2.545329,    7,},
    {52.0,    170.0,    9,    0.0,    0.0,    0.55555564,    0.4554201,    0.94444436,    0.38968262,    25.444445,    20.11111,    25.333334,    30.88889,    -16.0,    -0.33333334,    16.333334,    30.88889,    0.34911168,    2.6040132,    7,},
    {233.0,    184.0,    9,    0.0,    0.0,    0.5000002,    0.077777766,    0.7777777,    0.785185,    11.851851,    9.777778,    9.888889,    15.888889,    -6.2222223,    -5.888889,    12.111111,    15.888889,    0.40555555,    2.1286457,    7,},
    {237.0,    191.0,    9,    0.0,    0.0,    1.0,    0.31111106,    1.5,    1.0111109,    7.3333335,    5.3333335,    5.4444447,    11.222222,    -6.0,    -5.6666665,    11.666667,    11.222222,    0.5358197,    2.1224225,    7,},
    {36.0,    243.0,    9,    0.11111111,    0.0,    1.888889,    1.8518513,    2.0,    0.7111104,    13.333333,    9.888889,    12.111111,    18.0,    -10.333333,    -3.6666667,    14.0,    18.0,    0.4522286,    2.3683105,    7,},
    {186.0,    218.0,    9,    0.0,    0.0,    1.1666666,    0.74444425,    1.1666665,    0.65555507,    13.703704,    10.666667,    12.666667,    17.777779,    -9.111111,    -3.1111112,    12.222222,    17.777779,    0.40134683,    2.3826835,    7,},
    {197.0,    236.0,    9,    0.0,    0.0,    2.4444444,    6.829628,    3.3333333,    7.599998,    16.074074,    13.111111,    16.666668,    18.444445,    -8.888889,    1.7777778,    7.111111,    18.555555,    0.29272884,    2.7898002,    7,},
    {208.0,    240.0,    9,    0.11111111,    0.0,    1.0555557,    0.86296326,    2.4444444,    5.007407,    14.148149,    10.888889,    13.0,    18.555555,    -9.777778,    -3.4444444,    13.222222,    18.555555,    0.42162097,    2.3924873,    7,},
    {223.0,    185.0,    9,    0.0,    0.0,    0.5,    0.34960312,    2.3888886,    2.0807757,    12.962963,    11.555555,    9.777778,    17.555555,    -4.2222223,    -9.555555,    13.777778,    17.555555,    0.44541803,    1.8388497,    7,}
};

//Liver Disorders DataSet Information.
#define NumberOfInstanceInLiverDisordersDataSet 345
#define NumberOfAttributeInLiverDisordersDataSet 6
#define NumberOfClassInLiverDisordersDataSet 1
int NumberOfCategoryOfEachAttributeValueInLiverDisordersDataSet[NumberOfAttributeInLiverDisordersDataSet]={
    10, 10, 10, 10, 10, 10
};
#define NumberOfCategoryOfClassInLiverDisordersDataSet 7
int DataTypeOfEachAttributeInLiverDisordersDataSet[NumberOfAttributeInLiverDisordersDataSet]={
    1,  1,  1,  1,  1,  1
};
double LiverDisordersDataSet[NumberOfInstanceInLiverDisordersDataSet][IdentificationNonExistence+NumberOfAttributeInLiverDisordersDataSet+NumberOfClassInLiverDisordersDataSet]={
    {85,    92,    45,    27,    31,    0.0,    1},
    {85,    64,    59,    32,    23,    0.0,    2},
    {86,    54,    33,    16,    54,    0.0,    2},
    {91,    78,    34,    24,    36,    0.0,    2},
    {87,    70,    12,    28,    10,    0.0,    2},
    {98,    55,    13,    17,    17,    0.0,    2},
    {88,    62,    20,    17,    9,     0.5,    1},
    {88,    67,    21,    11,    11,    0.5,    1},
    {92,    54,    22,    20,    7,     0.5,    1},
    {90,    60,    25,    19,    5,     0.5,    1},
    {89,    52,    13,    24,    15,    0.5,    1},
    {82,    62,    17,    17,    15,    0.5,    1},
    {90,    64,    61,    32,    13,    0.5,    1},
    {86,    77,    25,    19,    18,    0.5,    1},
    {96,    67,    29,    20,    11,    0.5,    1},
    {91,    78,    20,    31,    18,    0.5,    1},
    {89,    67,    23,    16,    10,    0.5,    1},
    {89,    79,    17,    17,    16,    0.5,    1},
    {91,    107,   20,    20,    56,    0.5,    1},
    {94,    116,   11,    33,    11,    0.5,    1},
    {92,    59,    35,    13,    19,    0.5,    1},
    {93,    23,    35,    20,    20,    0.5,    1},
    {90,    60,    23,    27,    5,     0.5,    1},
    {96,    68,    18,    19,    19,    0.5,    1},
    {84,    80,    47,    33,    97,    0.5,    1},
    {92,    70,    24,    13,    26,    0.5,    1},
    {90,    47,    28,    15,    18,    0.5,    1},
    {88,    66,    20,    21,    10,    0.5,    1},
    {91,    102,   17,    13,    19,    0.5,    1},
    {87,    41,    31,    19,    16,    0.5,    1},
    {86,    79,    28,    16,    17,    0.5,    1},
    {91,    57,    31,    23,    42,    0.5,    1},
    {93,    77,    32,    18,    29,    0.5,    1},
    {88,    96,    28,    21,    40,    0.5,    1},
    {94,    65,    22,    18,    11,    0.5,    1},
    {91,    72,    155,   68,    82,    0.5,    2},
    {85,    54,    47,    33,    22,    0.5,    2},
    {79,    39,    14,    19,    9,     0.5,    2},
    {85,    85,    25,    26,    30,    0.5,    2},
    {89,    63,    24,    20,    38,    0.5,    2},
    {84,    92,    68,    37,    44,    0.5,    2},
    {89,    68,    26,    39,    42,    0.5,    2},
    {89,    101,   18,    25,    13,    0.5,    2},
    {86,    84,    18,    14,    16,    0.5,    2},
    {85,    65,    25,    14,    18,    0.5,    2},
    {88,    61,    19,    21,    13,    0.5,    2},
    {92,    56,    14,    16,    10,    0.5,    2},
    {95,    50,    29,    25,    50,    0.5,    2},
    {91,    75,    24,    22,    11,    0.5,    2},
    {83,    40,    29,    25,    38,    0.5,    2},
    {89,    74,    19,    23,    16,    0.5,    2},
    {85,    64,    24,    22,    11,    0.5,    2},
    {92,    57,    64,    36,    90,    0.5,    2},
    {94,    48,    11,    23,    43,    0.5,    2},
    {87,    52,    21,    19,    30,    0.5,    2},
    {85,    65,    23,    29,    15,    0.5,    2},
    {84,    82,    21,    21,    19,    0.5,    2},
    {88,    49,    20,    22,    19,    0.5,    2},
    {96,    67,    26,    26,    36,    0.5,    2},
    {90,    63,    24,    24,    24,    0.5,    2},
    {90,    45,    33,    34,    27,    0.5,    2},
    {90,    72,    14,    15,    18,    0.5,    2},
    {91,    55,    4,     8,     13,    0.5,    2},
    {91,    52,    15,    22,    11,    0.5,    2},
    {87,    71,    32,    19,    27,    1.0,    1},
    {89,    77,    26,    20,    19,    1.0,    1},
    {89,    67,    5,     17,    14,    1.0,    2},
    {85,    51,    26,    24,    23,    1.0,    2},
    {103,   75,    19,    30,    13,    1.0,    2},
    {90,    63,    16,    21,    14,    1.0,    2},
    {90,    63,    29,    23,    57,    2.0,    1},
    {90,    67,    35,    19,    35,    2.0,    1},
    {87,    66,    27,    22,    9,     2.0,    1},
    {90,    73,    34,    21,    22,    2.0,    1},
    {86,    54,    20,    21,    16,    2.0,    1},
    {90,    80,    19,    14,    42,    2.0,    1},
    {87,    90,    43,    28,    156,   2.0,    2},
    {96,    72,    28,    19,    30,    2.0,    2},
    {91,    55,    9,     25,    16,    2.0,    2},
    {95,    78,    27,    25,    30,    2.0,    2},
    {92,    101,   34,    30,    64,    2.0,    2},
    {89,    51,    41,    22,    48,    2.0,    2},
    {91,    99,    42,    33,    16,    2.0,    2},
    {94,    58,    21,    18,    26,    2.0,    2},
    {92,    60,    30,    27,    297,   2.0,    2},
    {94,    58,    21,    18,    26,    2.0,    2},
    {88,    47,    33,    26,    29,    2.0,    2},
    {92,    65,    17,    25,    9,     2.0,    2},
    {92,    79,    22,    20,    11,    3.0,    1},
    {84,    83,    20,    25,    7,     3.0,    1},
    {88,    68,    27,    21,    26,    3.0,    1},
    {86,    48,    20,    20,    6,     3.0,    1},
    {99,    69,    45,    32,    30,    3.0,    1},
    {88,    66,    23,    12,    15,    3.0,    1},
    {89,    62,    42,    30,    20,    3.0,    1},
    {90,    51,    23,    17,    27,    3.0,    1},
    {81,    61,    32,    37,    53,    3.0,    2},
    {89,    89,    23,    18,    104,   3.0,    2},
    {89,    65,    26,    18,    36,    3.0,    2},
    {92,    75,    26,    26,    24,    3.0,    2},
    {85,    59,    25,    20,    25,    3.0,    2},
    {92,    61,    18,    13,    81,    3.0,    2},
    {89,    63,    22,    27,    10,    4.0,    1},
    {90,    84,    18,    23,    13,    4.0,    1},
    {88,    95,    25,    19,    14,    4.0,    1},
    {89,    35,    27,    29,    17,    4.0,    1},
    {91,    80,    37,    23,    27,    4.0,    1},
    {91,    109,   33,    15,    18,    4.0,    1},
    {91,    65,    17,    5,     7,     4.0,    1},
    {88,    107,   29,    20,    50,    4.0,    2},
    {87,    76,    22,    55,    9,     4.0,    2},
    {87,    86,    28,    23,    21,    4.0,    2},
    {87,    42,    26,    23,    17,    4.0,    2},
    {88,    80,    24,    25,    17,    4.0,    2},
    {90,    96,    34,    49,    169,   4.0,    2},
    {86,    67,    11,    15,    8,     4.0,    2},
    {92,    40,    19,    20,    21,    4.0,    2},
    {85,    60,    17,    21,    14,    4.0,    2},
    {89,    90,    15,    17,    25,    4.0,    2},
    {91,    57,    15,    16,    16,    4.0,    2},
    {96,    55,    48,    39,    42,    4.0,    2},
    {79,    101,   17,    27,    23,    4.0,    2},
    {90,    134,   14,    20,    14,    4.0,    2},
    {89,    76,    14,    21,    24,    4.0,    2},
    {88,    93,    29,    27,    31,    4.0,    2},
    {90,    67,    10,    16,    16,    4.0,    2},
    {92,    73,    24,    21,    48,    4.0,    2},
    {91,    55,    28,    28,    82,    4.0,    2},
    {83,    45,    19,    21,    13,    4.0,    2},
    {90,    74,    19,    14,    22,    4.0,    2},
    {92,    66,    21,    16,    33,    5.0,    1},
    {93,    63,    26,    18,    18,    5.0,    1},
    {86,    78,    47,    39,    107,   5.0,    2},
    {97,    44,    113,   45,    150,   5.0,    2},
    {87,    59,    15,    19,    12,    5.0,    2},
    {86,    44,    21,    11,    15,    5.0,    2},
    {87,    64,    16,    20,    24,    5.0,    2},
    {92,    57,    21,    23,    22,    5.0,    2},
    {90,    70,    25,    23,    112,   5.0,    2},
    {99,    59,    17,    19,    11,    5.0,    2},
    {92,    80,    10,    26,    20,    6.0,    1},
    {95,    60,    26,    22,    28,    6.0,    1},
    {91,    63,    25,    26,    15,    6.0,    1},
    {92,    62,    37,    21,    36,    6.0,    1},
    {95,    50,    13,    14,    15,    6.0,    1},
    {90,    76,    37,    19,    50,    6.0,    1},
    {96,    70,    70,    26,    36,    6.0,    1},
    {95,    62,    64,    42,    76,    6.0,    1},
    {92,    62,    20,    23,    20,    6.0,    1},
    {91,    63,    25,    26,    15,    6.0,    1},
    {82,    56,    67,    38,    92,    6.0,    2},
    {92,    82,    27,    24,    37,    6.0,    2},
    {90,    63,    12,    26,    21,    6.0,    2},
    {88,    37,    9,     15,    16,    6.0,    2},
    {100,   60,    29,    23,    76,    6.0,    2},
    {98,    43,    35,    23,    69,    6.0,    2},
    {91,    74,    87,    50,    67,    6.0,    2},
    {92,    87,    57,    25,    44,    6.0,    2},
    {93,    99,    36,    34,    48,    6.0,    2},
    {90,    72,    17,    19,    19,    6.0,    2},
    {97,    93,    21,    20,    68,    6.0,    2},
    {93,    50,    18,    25,    17,    6.0,    2},
    {90,    57,    20,    26,    33,    6.0,    2},
    {92,    76,    31,    28,    41,    6.0,    2},
    {88,    55,    19,    17,    14,    6.0,    2},
    {89,    63,    24,    29,    29,    6.0,    2},
    {92,    79,    70,    32,    84,    7.0,    1},
    {92,    93,    58,    35,    120,   7.0,    1},
    {93,    84,    58,    47,    62,    7.0,    2},
    {97,    71,    29,    22,    52,    8.0,    1},
    {84,    99,    33,    19,    26,    8.0,    1},
    {96,    44,    42,    23,    73,    8.0,    1},
    {90,    62,    22,    21,    21,    8.0,    1},
    {92,    94,    18,    17,    6,     8.0,    1},
    {90,    67,    77,    39,    114,   8.0,    1},
    {97,    71,    29,    22,    52,    8.0,    1},
    {91,    69,    25,    25,    66,    8.0,    2},
    {93,    59,    17,    20,    14,    8.0,    2},
    {92,    95,    85,    48,    200,   8.0,    2},
    {90,    50,    26,    22,    53,    8.0,    2},
    {91,    62,    59,    47,    60,    8.0,    2},
    {92,    93,    22,    28,    123,   9.0,    1},
    {92,    77,    86,    41,    31,    10.0,   1},
    {86,    66,    22,    24,    26,    10.0,   2},
    {98,    57,    31,    34,    73,    10.0,   2},
    {95,    80,    50,    64,    55,    10.0,   2},
    {92,    108,   53,    33,    94,    12.0,   2},
    {97,    92,    22,    28,    49,    12.0,   2},
    {93,    77,    39,    37,    108,   16.0,   1},
    {94,    83,    81,    34,    201,   20.0,   1},
    {87,    75,    25,    21,    14,    0.0,    1},
    {88,    56,    23,    18,    12,    0.0,    1},
    {84,    97,    41,    20,    32,    0.0,    2},
    {94,    91,    27,    20,    15,    0.5,    1},
    {97,    62,    17,    13,    5,     0.5,    1},
    {92,    85,    25,    20,    12,    0.5,    1},
    {82,    48,    27,    15,    12,    0.5,    1},
    {88,    74,    31,    25,    15,    0.5,    1},
    {95,    77,    30,    14,    21,    0.5,    1},
    {88,    94,    26,    18,    8,     0.5,    1},
    {91,    70,    19,    19,    22,    0.5,    1},
    {83,    54,    27,    15,    12,    0.5,    1},
    {91,    105,   40,    26,    56,    0.5,    1},
    {86,    79,    37,    28,    14,    0.5,    1},
    {91,    96,    35,    22,    135,   0.5,    1},
    {89,    82,    23,    14,    35,    0.5,    1},
    {90,    73,    24,    23,    11,    0.5,    1},
    {90,    87,    19,    25,    19,    0.5,    1},
    {89,    82,    33,    32,    18,    0.5,    1},
    {85,    79,    17,    8,     9,     0.5,    1},
    {85,    119,   30,    26,    17,    0.5,    1},
    {78,    69,    24,    18,    31,    0.5,    1},
    {88,    107,   34,    21,    27,    0.5,    1},
    {89,    115,   17,    27,    7,     0.5,    1},
    {92,    67,    23,    15,    12,    0.5,    1},
    {89,    101,   27,    34,    14,    0.5,    1},
    {91,    84,    11,    12,    10,    0.5,    1},
    {94,    101,   41,    20,    53,    0.5,    2},
    {88,    46,    29,    22,    18,    0.5,    2},
    {88,    122,   35,    29,    42,    0.5,    2},
    {84,    88,    28,    25,    35,    0.5,    2},
    {90,    79,    18,    15,    24,    0.5,    2},
    {87,    69,    22,    26,    11,    0.5,    2},
    {65,    63,    19,    20,    14,    0.5,    2},
    {90,    64,    12,    17,    14,    0.5,    2},
    {85,    58,    18,    24,    16,    0.5,    2},
    {88,    81,    41,    27,    36,    0.5,    2},
    {86,    78,    52,    29,    62,    0.5,    2},
    {82,    74,    38,    28,    48,    0.5,    2},
    {86,    58,    36,    27,    59,    0.5,    2},
    {94,    56,    30,    18,    27,    0.5,    2},
    {87,    57,    30,    30,    22,    0.5,    2},
    {98,    74,    148,   75,    159,   0.5,    2},
    {94,    75,    20,    25,    38,    0.5,    2},
    {83,    68,    17,    20,    71,    0.5,    2},
    {93,    56,    25,    21,    33,    0.5,    2},
    {101,   65,    18,    21,    22,    0.5,    2},
    {92,    65,    25,    20,    31,    0.5,    2},
    {92,    58,    14,    16,    13,    0.5,    2},
    {86,    58,    16,    23,    23,    0.5,    2},
    {85,    62,    15,    13,    22,    0.5,    2},
    {86,    57,    13,    20,    13,    0.5,    2},
    {86,    54,    26,    30,    13,    0.5,    2},
    {81,    41,    33,    27,    34,    1.0,    1},
    {91,    67,    32,    26,    13,    1.0,    1},
    {91,    80,    21,    19,    14,    1.0,    1},
    {92,    60,    23,    15,    19,    1.0,    1},
    {91,    60,    32,    14,    8,     1.0,    1},
    {93,    65,    28,    22,    10,    1.0,    1},
    {90,    63,    45,    24,    85,    1.0,    2},
    {87,    92,    21,    22,    37,    1.0,    2},
    {83,    78,    31,    19,    115,   1.0,    2},
    {95,    62,    24,    23,    14,    1.0,    2},
    {93,    59,    41,    30,    48,    1.0,    2},
    {84,    82,    43,    32,    38,    2.0,    1},
    {87,    71,    33,    20,    22,    2.0,    1},
    {86,    44,    24,    15,    18,    2.0,    1},
    {86,    66,    28,    24,    21,    2.0,    1},
    {88,    58,    31,    17,    17,    2.0,    1},
    {90,    61,    28,    29,    31,    2.0,    1},
    {88,    69,    70,    24,    64,    2.0,    1},
    {93,    87,    18,    17,    26,    2.0,    1},
    {98,    58,    33,    21,    28,    2.0,    1},
    {91,    44,    18,    18,    23,    2.0,    2},
    {87,    75,    37,    19,    70,    2.0,    2},
    {94,    91,    30,    26,    25,    2.0,    2},
    {88,    85,    14,    15,    10,    2.0,    2},
    {89,    109,   26,    25,    27,    2.0,    2},
    {87,    59,    37,    27,    34,    2.0,    2},
    {93,    58,    20,    23,    18,    2.0,    2},
    {88,    57,    9,     15,    16,    2.0,    2},
    {94,    65,    38,    27,    17,    3.0,    1},
    {91,    71,    12,    22,    11,    3.0,    1},
    {90,    55,    20,    20,    16,    3.0,    1},
    {91,    64,    21,    17,    26,    3.0,    2},
    {88,    47,    35,    26,    33,    3.0,    2},
    {82,    72,    31,    20,    84,    3.0,    2},
    {85,    58,    83,    49,    51,    3.0,    2},
    {91,    54,    25,    22,    35,    4.0,    1},
    {98,    50,    27,    25,    53,    4.0,    2},
    {86,    62,    29,    21,    26,    4.0,    2},
    {89,    48,    32,    22,    14,    4.0,    2},
    {82,    68,    20,    22,    9,     4.0,    2},
    {83,    70,    17,    19,    23,    4.0,    2},
    {96,    70,    21,    26,    21,    4.0,    2},
    {94,    117,   77,    56,    52,    4.0,    2},
    {93,    45,    11,    14,    21,    4.0,    2},
    {93,    49,    27,    21,    29,    4.0,    2},
    {84,    73,    46,    32,    39,    4.0,    2},
    {91,    63,    17,    17,    46,    4.0,    2},
    {90,    57,    31,    18,    37,    4.0,    2},
    {87,    45,    19,    13,    16,    4.0,    2},
    {91,    68,    14,    20,    19,    4.0,    2},
    {86,    55,    29,    35,    108,   4.0,    2},
    {91,    86,    52,    47,    52,    4.0,    2},
    {88,    46,    15,    33,    55,    4.0,    2},
    {85,    52,    22,    23,    34,    4.0,    2},
    {89,    72,    33,    27,    55,    4.0,    2},
    {95,    59,    23,    18,    19,    4.0,    2},
    {94,    43,    154,   82,    121,   4.0,    2},
    {96,    56,    38,    26,    23,    5.0,    2},
    {90,    52,    10,    17,    12,    5.0,    2},
    {94,    45,    20,    16,    12,    5.0,    2},
    {99,    42,    14,    21,    49,    5.0,    2},
    {93,    102,   47,    23,    37,    5.0,    2},
    {94,    71,    25,    26,    31,    5.0,    2},
    {92,    73,    33,    34,    115,   5.0,    2},
    {87,    54,    41,    29,    23,    6.0,    1},
    {92,    67,    15,    14,    14,    6.0,    1},
    {98,    101,   31,    26,    32,    6.0,    1},
    {92,    53,    51,    33,    92,    6.0,    1},
    {97,    94,    43,    43,    82,    6.0,    1},
    {93,    43,    11,    16,    54,    6.0,    1},
    {93,    68,    24,    18,    19,    6.0,    1},
    {95,    36,    38,    19,    15,    6.0,    1},
    {99,    86,    58,    42,    203,   6.0,    1},
    {98,    66,    103,   57,    114,   6.0,    1},
    {92,    80,    10,    26,    20,    6.0,    1},
    {96,    74,    27,    25,    43,    6.0,    2},
    {95,    93,    21,    27,    47,    6.0,    2},
    {86,    109,   16,    22,    28,    6.0,    2},
    {91,    46,    30,    24,    39,    7.0,    2},
    {102,   82,    34,    78,    203,   7.0,    2},
    {85,    50,    12,    18,    14,    7.0,    2},
    {91,    57,    33,    23,    12,    8.0,    1},
    {91,    52,    76,    32,    24,    8.0,    1},
    {93,    70,    46,    30,    33,    8.0,    1},
    {87,    55,    36,    19,    25,    8.0,    1},
    {98,    123,   28,    24,    31,    8.0,    1},
    {82,    55,    18,    23,    44,    8.0,    2},
    {95,    73,    20,    25,    225,   8.0,    2},
    {97,    80,    17,    20,    53,    8.0,    2},
    {100,   83,    25,    24,    28,    8.0,    2},
    {88,    91,    56,    35,    126,   9.0,    2},
    {91,    138,   45,    21,    48,    10.0,   1},
    {92,    41,    37,    22,    37,    10.0,   1},
    {86,    123,   20,    25,    23,    10.0,   2},
    {91,    93,    35,    34,    37,    10.0,   2},
    {87,    87,    15,    23,    11,    10.0,   2},
    {87,    56,    52,    43,    55,    10.0,   2},
    {99,    75,    26,    24,    41,    12.0,   1},
    {96,    69,    53,    43,    203,   12.0,   2},
    {98,    77,    55,    35,    89,    15.0,   1},
    {91,    68,    27,    26,    14,    16.0,   1},
    {98,    99,    57,    45,    65,    20.0,   1}
};
struct  DataSetInformationDataType{
    int         IdentificationOfUCIDataSet;
    double**    DataSet;
    int         NumberOfInstanceInDataSet;
    int         NumberOfAttributeInDataSet;
    int         NumberOfClassInDataSet;
    int         ExistenceOfIdentification;
    int*        NumberOfCategoryOfEachAttributeValueInDataSet;
    int         NumberOfCategoryOfClassInDataSet;
    int*        DataTypeOfEachAttributeInDataSet;
};
void    Identification(struct  DataSetInformationDataType);
void Discretization(struct DataSetInformationDataType DataSetInformation){
    double**    DataSet;
                DataSet=DataSetInformation.DataSet;
    int         NumberOfInstanceInDataSet;
                NumberOfInstanceInDataSet=DataSetInformation.NumberOfInstanceInDataSet;
    int         NumberOfAttributeInDataSet;
                NumberOfAttributeInDataSet=DataSetInformation.NumberOfAttributeInDataSet;
    int         NumberOfClassInDataSet;
                NumberOfClassInDataSet=DataSetInformation.NumberOfClassInDataSet;
    int*        DataTypeOfEachAttributeInDataSet;
                DataTypeOfEachAttributeInDataSet=DataSetInformation.DataTypeOfEachAttributeInDataSet;
    double*     Maximum;
                Maximum=(double*)malloc(NumberOfAttributeInDataSet*sizeof(double));
    for(int i=0;i<NumberOfAttributeInDataSet;i++){
        Maximum[i]=DataSet[0][i];
    }
    double*     Minimum;
                Minimum=(double*)malloc(NumberOfAttributeInDataSet*sizeof(double));
    for(int i=0;i<NumberOfAttributeInDataSet;i++){
        Minimum[i]=DataSet[0][i];
    }
    for(int i=0;i<NumberOfAttributeInDataSet;i++){
        for(int iota=0;iota<NumberOfInstanceInDataSet;iota++){
            if(DataSet[iota][i]>Maximum[i]){
                Maximum[i]=DataSet[iota][i];
            }
            if(DataSet[iota][i]<Minimum[i]){
                Minimum[i]=DataSet[iota][i];
            }
        }
    }
    double*     IntervalLength;
                IntervalLength=(double*)malloc(NumberOfAttributeInDataSet*sizeof(double));
    for(int i=0;i<NumberOfAttributeInDataSet;i++){
        IntervalLength[i]=(Maximum[i]-Minimum[i])/NumberOfBins;
    }
    double**    SplittingPoint;
                SplittingPoint=(double**)malloc(NumberOfAttributeInDataSet*sizeof(double*));
    for(int i=0;i<NumberOfAttributeInDataSet;i++){
        SplittingPoint[i]=(double*)malloc((NumberOfBins-1)*sizeof(double));
    }
    for(int i=0;i<NumberOfAttributeInDataSet;i++){
        for(int iota=0;iota<NumberOfBins-1;iota++){
            SplittingPoint[i][iota]=Minimum[i]+(iota+1)*IntervalLength[i];
        }
    }
    double**    IntervalBoundary;
                IntervalBoundary=(double**)malloc(NumberOfAttributeInDataSet*sizeof(double*));
    for(int i=0;i<NumberOfAttributeInDataSet;i++){
        IntervalBoundary[i]=(double*)malloc((NumberOfBins+1)*sizeof(double));
    }
    for(int i=0;i<NumberOfAttributeInDataSet;i++){
        for(int iota=1;iota<NumberOfBins;iota++){
            IntervalBoundary[i][iota]=SplittingPoint[i][iota-1];
        }
        IntervalBoundary[i][0]=Minimum[i]-1;
        IntervalBoundary[i][NumberOfBins]=Maximum[i]+1;
    }
    for(int i=0;i<NumberOfAttributeInDataSet;i++){
        if(DataTypeOfEachAttributeInDataSet[i]==1){
            for(int iota=0;iota<NumberOfInstanceInDataSet;iota++){
                for(int yodh=0;yodh<NumberOfBins;yodh++){
                    if((DataSet[iota][i]>=IntervalBoundary[i][yodh])&&(DataSet[iota][i]<IntervalBoundary[i][yodh+1])){
                        DataSet[iota][i]=yodh+1;
                        break;
                    }
                }
            }
        }
    }
}
struct  MapOfCharacteristicInDataSetInformationDataType{
    int***  MapOfAttributeValueInDataSet;
    int**   MapOfClassValueInDataSet;
    int**   NumberOfEachAttributeValue;
    int*    NumberOfEachClassValue;
};
struct  MapOfCharacteristicInDataSetInformationDataType  Geocoding(struct DataSetInformationDataType DataSetInformation){
    double**    DataSet;
                DataSet=DataSetInformation.DataSet;
    int         NumberOfInstanceInDataSet;
                NumberOfInstanceInDataSet=DataSetInformation.NumberOfInstanceInDataSet;
    int         NumberOfAttributeInDataSet;
                NumberOfAttributeInDataSet=DataSetInformation.NumberOfAttributeInDataSet;
    int         NumberOfClassInDataSet;
                NumberOfClassInDataSet=DataSetInformation.NumberOfClassInDataSet;
    int*        NumberOfCategoryOfEachAttributeValueInDataSet;
                NumberOfCategoryOfEachAttributeValueInDataSet=DataSetInformation.NumberOfCategoryOfEachAttributeValueInDataSet;
    int         NumberOfCategoryOfClassInDataSet;
                NumberOfCategoryOfClassInDataSet=DataSetInformation.NumberOfCategoryOfClassInDataSet;
    int***      MapOfAttributeValueInDataSet;
                MapOfAttributeValueInDataSet=(int***)malloc(NumberOfInstanceInDataSet*sizeof(int**));
                for(int i=0;i<NumberOfInstanceInDataSet;i++){
                    MapOfAttributeValueInDataSet[i]=(int**)malloc(NumberOfAttributeInDataSet*sizeof(int*));
                    for(int iota=0;iota<NumberOfAttributeInDataSet;iota++){
                        MapOfAttributeValueInDataSet[i][iota]=(int*)malloc(NumberOfCategoryOfEachAttributeValueInDataSet[iota]*sizeof(int));
                    }
                }
                for(int i=0;i<NumberOfInstanceInDataSet;i++){
                    for(int iota=0;iota<NumberOfAttributeInDataSet;iota++){
                        for(int yodh=0;yodh<NumberOfCategoryOfEachAttributeValueInDataSet[iota];yodh++){
                            MapOfAttributeValueInDataSet[i][iota][yodh]=0;
                        }
                    }
                }
    int**       CumulativeNumberOfAttributeValue;
                CumulativeNumberOfAttributeValue=(int**)malloc(NumberOfAttributeInDataSet*sizeof(int*));
                for(int i=0;i<NumberOfAttributeInDataSet;i++){
                    CumulativeNumberOfAttributeValue[i]=(int*)malloc(NumberOfCategoryOfEachAttributeValueInDataSet[i]*sizeof(int));
                }
                for(int i=0;i<NumberOfAttributeInDataSet;i++){
                    for(int iota=0;iota<NumberOfCategoryOfEachAttributeValueInDataSet[i];iota++){
                        CumulativeNumberOfAttributeValue[i][iota]=0;
                    }
                }
    
    for(int i=0;i<NumberOfAttributeInDataSet;i++){
        for(int iota=0;iota<NumberOfInstanceInDataSet;iota++){
            for(int yodh=0;yodh<NumberOfCategoryOfEachAttributeValueInDataSet[i];yodh++){
                if(DataSet[iota][i]==yodh+1){
                    MapOfAttributeValueInDataSet[CumulativeNumberOfAttributeValue[i][yodh]][i][yodh]=iota+1;
                    CumulativeNumberOfAttributeValue[i][yodh]=CumulativeNumberOfAttributeValue[i][yodh]+1;
                }
            }
        }
    }
    int**       MapOfClassValueInDataSet;
                MapOfClassValueInDataSet=(int**)malloc(NumberOfCategoryOfClassInDataSet*sizeof(int*));
                for(int i=0;i<NumberOfCategoryOfClassInDataSet;i++){
                    MapOfClassValueInDataSet[i]=(int*)malloc(NumberOfInstanceInDataSet*sizeof(int));
                }
                for(int i=0;i<NumberOfCategoryOfClassInDataSet;i++){
                    for(int iota=0;iota<NumberOfInstanceInDataSet;iota++){
                        MapOfClassValueInDataSet[i][iota]=0;
                    }
                }
    int*    CumulativeNumberOfClassValue;
            CumulativeNumberOfClassValue=(int*)malloc(NumberOfCategoryOfClassInDataSet*sizeof(int));
            for(int i=0;i<NumberOfCategoryOfClassInDataSet;i++){
                CumulativeNumberOfClassValue[i]=0;
            }
    for(int i=0;i<NumberOfInstanceInDataSet;i++){
        for(int iota=0;iota<NumberOfCategoryOfClassInDataSet;iota++){
            if(DataSet[i][NumberOfAttributeInDataSet+NumberOfClassInDataSet-1]==iota+1){
                MapOfClassValueInDataSet[iota][CumulativeNumberOfClassValue[iota]]=i+1;
                CumulativeNumberOfClassValue[iota]=CumulativeNumberOfClassValue[iota]+1;
            }
        }
    }
    struct MapOfCharacteristicInDataSetInformationDataType MapOfCharacteristicInDataSetInformation;
           MapOfCharacteristicInDataSetInformation.MapOfAttributeValueInDataSet=MapOfAttributeValueInDataSet;
           MapOfCharacteristicInDataSetInformation.MapOfClassValueInDataSet=MapOfClassValueInDataSet;
           MapOfCharacteristicInDataSetInformation.NumberOfEachAttributeValue=CumulativeNumberOfAttributeValue;
           MapOfCharacteristicInDataSetInformation.NumberOfEachClassValue=CumulativeNumberOfClassValue;
    return MapOfCharacteristicInDataSetInformation;
}
int***  ClassConditionalDistribution(struct DataSetInformationDataType DataSetInformation,struct MapOfCharacteristicInDataSetInformationDataType MapOfCharacteristicInDataSetInformation){
    int     NumberOfInstanceInDataSet;
            NumberOfInstanceInDataSet=DataSetInformation.NumberOfInstanceInDataSet;
    int     NumberOfAttributeInDataSet;
            NumberOfAttributeInDataSet=DataSetInformation.NumberOfAttributeInDataSet;
    int     NumberOfClassInDataSet;
            NumberOfClassInDataSet=DataSetInformation.NumberOfClassInDataSet;
    int*    NumberOfCategoryOfEachAttributeValueInDataSet;
            NumberOfCategoryOfEachAttributeValueInDataSet=DataSetInformation.NumberOfCategoryOfEachAttributeValueInDataSet;
    int     NumberOfCategoryOfClassInDataSet;
            NumberOfCategoryOfClassInDataSet=DataSetInformation.NumberOfCategoryOfClassInDataSet;
    int***  MapOfAttributeValueInDataSet;
            MapOfAttributeValueInDataSet=MapOfCharacteristicInDataSetInformation.MapOfAttributeValueInDataSet;
    int**   MapOfClassValueInDataSet;
            MapOfClassValueInDataSet=MapOfCharacteristicInDataSetInformation.MapOfClassValueInDataSet;
    int**   NumberOfEachAttributeValue;
            NumberOfEachAttributeValue=MapOfCharacteristicInDataSetInformation.NumberOfEachAttributeValue;
    int*    NumberOfEachClassValue;
            NumberOfEachClassValue=MapOfCharacteristicInDataSetInformation.NumberOfEachClassValue;
    int***  DataInformationOfNaÃ¯veBayesianClassifier;
            DataInformationOfNaÃ¯veBayesianClassifier=(int***)malloc(NumberOfCategoryOfClassInDataSet*sizeof(int**));
    for(int i=0;i<NumberOfCategoryOfClassInDataSet;i++){
        DataInformationOfNaÃ¯veBayesianClassifier[i]=(int**)malloc(NumberOfAttributeInDataSet*sizeof(int*));
        for(int iota=0;iota<NumberOfAttributeInDataSet;iota++){
            DataInformationOfNaÃ¯veBayesianClassifier[i][iota]=(int*)malloc(NumberOfCategoryOfEachAttributeValueInDataSet[iota]*sizeof(int));
        }
    }
    for(int i=0;i<NumberOfCategoryOfClassInDataSet;i++){
        for(int iota=0;iota<NumberOfAttributeInDataSet;iota++){
            for(int j=0;j<NumberOfCategoryOfEachAttributeValueInDataSet[iota];j++){
                DataInformationOfNaÃ¯veBayesianClassifier[i][iota][j]=0;
            }
        }
    }
    int Comparator;
    int Compared;
    for(int i=0;i<NumberOfCategoryOfClassInDataSet;i++){
        if(NumberOfEachClassValue[i]==0){
            continue;
        }
        for(int iota=0;iota<NumberOfAttributeInDataSet;iota++){
            for(int yodh=0;yodh<NumberOfCategoryOfEachAttributeValueInDataSet[iota];yodh++){
            if(NumberOfEachAttributeValue[iota][yodh]==0){
                continue;
            }
            Comparator=0;
            Compared=0;
            
            start:
                if(MapOfAttributeValueInDataSet[Comparator][iota][yodh]==MapOfClassValueInDataSet[i][Compared]){
                    Compared=Compared+1;
                    Comparator=Comparator+1;
                    if((Compared>=NumberOfEachClassValue[i])&&(Comparator>=NumberOfEachAttributeValue[iota][yodh])){
                        DataInformationOfNaÃ¯veBayesianClassifier[i][iota][yodh]=DataInformationOfNaÃ¯veBayesianClassifier[i][iota][yodh]+1;
                        continue;
                    }else{
                        DataInformationOfNaÃ¯veBayesianClassifier[i][iota][yodh]=DataInformationOfNaÃ¯veBayesianClassifier[i][iota][yodh]+1;
                        goto start;
                    }
                    
                }else if(MapOfAttributeValueInDataSet[Comparator][iota][yodh]>MapOfClassValueInDataSet[i][Compared]){
                    Compared=Compared+1;
                    if(Compared>=NumberOfEachClassValue[i]){
                        continue;
                    }
                    goto start;
                }else{
                    Comparator=Comparator+1;
                    if(Comparator>=NumberOfEachAttributeValue[iota][yodh]){
                        continue;
                    }
                    goto start;
                }
            }
        }
    }
    return DataInformationOfNaÃ¯veBayesianClassifier;
}
void Swap(int* Operator,int* Operand){
    int TemperatureStorageSpace;
    TemperatureStorageSpace=*Operator;
    *Operator=*Operand;
    *Operand=TemperatureStorageSpace;
}
int* RandomNumberSeriesGeration(int QuantityOfNumbersInRandomNumberSeries){
    int*    RandomNumberSeries;
            RandomNumberSeries=(int*)malloc(QuantityOfNumbersInRandomNumberSeries*sizeof(int));
            for(int i=0;i<QuantityOfNumbersInRandomNumberSeries;i++){
                RandomNumberSeries[i]=i+1;
            }
    
    for(int i=0;i<QuantityOfNumbersInRandomNumberSeries;i++){
        int RandomNumber;
            RandomNumber=rand()%QuantityOfNumbersInRandomNumberSeries;
        Swap(RandomNumberSeries+i,RandomNumberSeries+RandomNumber);
    }
    return RandomNumberSeries;
}
struct TrainningAndTestingDataSetInformationDataTyp{
    int**   TestingDataSet;
    int**   TrainningDataSet;
    int*    NumberOfInstanceInTestingDataSet;
    int*    NumberOfInstanceInTrainningDataSet;
};
struct TrainningAndTestingDataSetInformationDataTyp TrainningAndTestingDataSetGeneration(struct DataSetInformationDataType DataSetInformation){
    int     NumberOfInstanceInDataSet;
            NumberOfInstanceInDataSet=DataSetInformation.NumberOfInstanceInDataSet;
    int     NumberOfAttributeInDataSet;
            NumberOfAttributeInDataSet=DataSetInformation.NumberOfAttributeInDataSet;
    int     NumberOfClassInDataSet;
            NumberOfClassInDataSet=DataSetInformation.NumberOfClassInDataSet;
    int*    NumberOfCategoryOfEachAttributeValueInDataSet;
            NumberOfCategoryOfEachAttributeValueInDataSet=DataSetInformation.NumberOfCategoryOfEachAttributeValueInDataSet;
    int     NumberOfCategoryOfClassInDataSet;
            NumberOfCategoryOfClassInDataSet=DataSetInformation.NumberOfCategoryOfClassInDataSet;
    
    int*    RandomNumberSeries;
            RandomNumberSeries=RandomNumberSeriesGeration(NumberOfInstanceInDataSet);
    int*    NumberOfInstanceInEachFold;
            NumberOfInstanceInEachFold=(int*)malloc(NumberOfFolds*sizeof(int));
    
    for(int i=0;i<NumberOfFolds;i++){
        NumberOfInstanceInEachFold[i]=NumberOfInstanceInDataSet/NumberOfFolds;
    }
    for(int i=0;i<NumberOfInstanceInDataSet%NumberOfFolds;i++){
        NumberOfInstanceInEachFold[i]=NumberOfInstanceInEachFold[i]+1;
    }
    int*    FoldSplittingBoundary;
            FoldSplittingBoundary=(int*)malloc((NumberOfFolds+1)*sizeof(int));
    for(int i=0;i<(NumberOfFolds+1);i++){
        if(i==0){
            FoldSplittingBoundary[i]=0;
        }else{
            FoldSplittingBoundary[i]=0;
            for(int iota=0;iota<i;iota++){
                FoldSplittingBoundary[i]=FoldSplittingBoundary[i]+NumberOfInstanceInEachFold[iota];
            }
        }
    }
    int**   Folds;
            Folds=(int**)malloc(NumberOfFolds*sizeof(int*));
    for(int i=0;i<NumberOfFolds;i++){
        Folds[i]=(int*)malloc(NumberOfInstanceInEachFold[i]*sizeof(int));
    }
    int*    NumberOfInstanceInTestingDataSet;
            NumberOfInstanceInTestingDataSet=(int*)malloc(NumberOfFolds*sizeof(int));
    int*    NumberOfInstanceInTrainningDataSet;
            NumberOfInstanceInTrainningDataSet=(int*)malloc(NumberOfFolds*sizeof(int));
    for(int i=0;i<NumberOfFolds;i++){
        NumberOfInstanceInTestingDataSet[i]=NumberOfInstanceInEachFold[i];
        NumberOfInstanceInTrainningDataSet[i]=NumberOfInstanceInDataSet-NumberOfInstanceInTestingDataSet[i];
    }
    int**   TestingDataSet;
            TestingDataSet=(int**)malloc(NumberOfFolds*sizeof(int*));
    int**   TrainningDataSet;
            TrainningDataSet=(int**)malloc(NumberOfFolds*sizeof(int*));
    for(int i=0;i<NumberOfFolds;i++){
        TestingDataSet[i]=(int*)malloc(NumberOfInstanceInTestingDataSet[i]*sizeof(int));
        TrainningDataSet[i]=(int*)malloc(NumberOfInstanceInTrainningDataSet[i]*sizeof(int));
    }
    for(int i=0;i<NumberOfFolds;i++){
        int CumulativeNumber;
            CumulativeNumber=0;
        for(int iota=FoldSplittingBoundary[i];iota<FoldSplittingBoundary[i+1];iota++){
            TestingDataSet[i][CumulativeNumber]=RandomNumberSeries[iota];
            CumulativeNumber=CumulativeNumber+1;
        }
        CumulativeNumber=0;
        for(int iota=0;iota<NumberOfFolds;iota++){
            if(iota!=i){
                for(int yodh=FoldSplittingBoundary[iota];yodh<FoldSplittingBoundary[iota+1];yodh++){
                    TrainningDataSet[i][CumulativeNumber]=RandomNumberSeries[yodh];
                    CumulativeNumber=CumulativeNumber+1;
                }
            }
        }
    }
    struct TrainningAndTestingDataSetInformationDataTyp TrainningAndTestingDataSetInformation;
           TrainningAndTestingDataSetInformation.TestingDataSet=TestingDataSet;
           TrainningAndTestingDataSetInformation.TrainningDataSet=TrainningDataSet;
           TrainningAndTestingDataSetInformation.NumberOfInstanceInTestingDataSet=NumberOfInstanceInTestingDataSet;
           TrainningAndTestingDataSetInformation.NumberOfInstanceInTrainningDataSet=NumberOfInstanceInTrainningDataSet;
    return TrainningAndTestingDataSetInformation;
}
struct BayesinaClassifierModelDataType{
    double***   ProbabilityOfEachAttributeValueGivenOnEachClassValue;
    double*     ProbabilityOfEachClassValue;
};
int* SelectiveNaÃ¯veBayesian(double** DataSet,struct BayesinaClassifierModelDataType BayesinaClassifierModel,struct DataSetInformationDataType TestingDataSetInformation){
    int         NumberOfClassInDataSet;
                NumberOfClassInDataSet=TestingDataSetInformation.NumberOfClassInDataSet;
    int         NumberOfInstanceInDataSet;
                NumberOfInstanceInDataSet=TestingDataSetInformation.NumberOfInstanceInDataSet;
    double***   ProbabilityOfEachAttributeValueGivenOnEachClassValue;
            ProbabilityOfEachAttributeValueGivenOnEachClassValue=BayesinaClassifierModel.ProbabilityOfEachAttributeValueGivenOnEachClassValue;
    double*     ProbabilityOfEachClassValue;
                ProbabilityOfEachClassValue=BayesinaClassifierModel.ProbabilityOfEachClassValue;
    double**    TestingDataSet;
                TestingDataSet=TestingDataSetInformation.DataSet;
    int         NumberOfCategoryOfClassInTestingDataSet;
                NumberOfCategoryOfClassInTestingDataSet=TestingDataSetInformation.NumberOfCategoryOfClassInDataSet;
    int         NumberOfAttributeInTestingDataSet;
                NumberOfAttributeInTestingDataSet=TestingDataSetInformation.NumberOfAttributeInDataSet;
    int         NumberOfClassInTesting;
                NumberOfClassInTesting=TestingDataSetInformation.NumberOfClassInDataSet;
    int*        SelectedAttribute;
    SelectedAttribute=(int*)malloc(NumberOfAttributeInTestingDataSet*sizeof(int));
    for(int i=0;i<NumberOfAttributeInTestingDataSet;i++){
        SelectedAttribute[i]=i+1;
    }
    int Counter;
        Counter=0;
    for(int i=NumberOfAttributeInTestingDataSet;i>1;i--){
        int Maximum;
            Maximum=0;
        int Index;
            Index=0;
        int* SelectedAttributeInEachIteration=(int*)malloc(NumberOfAttributeInTestingDataSet*sizeof(int));
        for(int j=NumberOfAttributeInTestingDataSet-i;j<NumberOfAttributeInTestingDataSet;j++){
            int index;
                index=0;
            for(int k=0;k<Counter;k++){
                SelectedAttributeInEachIteration[index]=SelectedAttribute[k];
                index++;
            }
            SelectedAttributeInEachIteration[index]=SelectedAttribute[j];
            index++;
            int     CumulativeNumber;
                    CumulativeNumber=0;
            double  Accuracy;
                    Accuracy=0;
            for(int Instnc=0;Instnc<NumberOfInstanceInDataSet;Instnc++){
                double  ProbabilityMeasureConditionOnEachClass;
                        ProbabilityMeasureConditionOnEachClass=0;
                double  Maximum;
                        Maximum=0;
                int     Index;
                        Index=0;
                for(int Cls=0;Cls<NumberOfCategoryOfClassInTestingDataSet;Cls++){
                    ProbabilityMeasureConditionOnEachClass=ProbabilityOfEachClassValue[Cls];
                    for(int Atrbt=0;Atrbt<Counter+1;Atrbt++){
                        
                        int N=TestingDataSet[Instnc][SelectedAttribute[SelectedAttributeInEachIteration[Atrbt]-1]-1]-1;
                        ProbabilityMeasureConditionOnEachClass=ProbabilityMeasureConditionOnEachClass*ProbabilityOfEachAttributeValueGivenOnEachClassValue[Cls][SelectedAttribute[SelectedAttributeInEachIteration[Atrbt]-1]-1][N];
                        
                    }
                    if(ProbabilityMeasureConditionOnEachClass>Maximum){
                        Maximum=ProbabilityMeasureConditionOnEachClass;
                        Index=Cls;
                    }
                }
                if(Index+1==TestingDataSet[Instnc][NumberOfAttributeInTestingDataSet+NumberOfClassInTesting-1]){
                    CumulativeNumber++;
                }
            }
            Accuracy=CumulativeNumber;
            if(Accuracy>Maximum){
                Maximum=Accuracy;
                Index=j;
            }
        }
        Swap(&SelectedAttribute[Counter],&SelectedAttribute[Index]);
        Counter=Counter+1;
    }
    return SelectedAttribute;
}
/*---------------------------------------------------------------------------------------------------------------------------------------------------------*/
int main(void){
    srand((int)time(NULL));
    struct  DataSetInformationDataType  GlassDataSetInformation;
            GlassDataSetInformation.IdentificationOfUCIDataSet=1;
            GlassDataSetInformation.NumberOfInstanceInDataSet=NumberOfInstanceInGlassDataSet;
            GlassDataSetInformation.NumberOfAttributeInDataSet=NumberOfAttributeInGlassDataSet;
            GlassDataSetInformation.NumberOfClassInDataSet=NumberOfClassInGlassDataSet;
            GlassDataSetInformation.ExistenceOfIdentification=IdentificationExistence;
            GlassDataSetInformation.DataTypeOfEachAttributeInDataSet=DataTypeOfEachAttributeInGlassDataSet;
            GlassDataSetInformation.NumberOfCategoryOfEachAttributeValueInDataSet=NumberOfCategoryOfEachAttributeValueInGlassDataSet;
            GlassDataSetInformation.NumberOfCategoryOfClassInDataSet=NumberOfCategoryOfClassInGlassDataSet;
    double**    DataSet;
                DataSet=(double**)malloc(NumberOfInstanceInGlassDataSet*sizeof(double*));
                for(int InstncQntty=0;InstncQntty<NumberOfInstanceInGlassDataSet;InstncQntty++){
                    DataSet[InstncQntty]=(double*)malloc((NumberOfAttributeInGlassDataSet+NumberOfClassInGlassDataSet)*sizeof(double));
                }
                for(int InstncQntty=0;InstncQntty<NumberOfInstanceInGlassDataSet;InstncQntty++){
                    for(int FtrQntty=0;FtrQntty<(NumberOfAttributeInGlassDataSet+NumberOfClassInGlassDataSet);FtrQntty++){
                        DataSet[InstncQntty][FtrQntty]=GlassDataSet[InstncQntty][FtrQntty+IdentificationExistence];
                    }
                }
    GlassDataSetInformation.DataSet=DataSet;
    Identification(GlassDataSetInformation);
    struct  DataSetInformationDataType  HepatitisDataSetInformation;
            HepatitisDataSetInformation.IdentificationOfUCIDataSet=2;
            HepatitisDataSetInformation.NumberOfInstanceInDataSet=NumberOfInstanceInHepatitisDataSet;
            HepatitisDataSetInformation.NumberOfAttributeInDataSet=NumberOfAttributeInHepatitisDataSet;
            HepatitisDataSetInformation.NumberOfClassInDataSet=NumberOfClassInHepatitisDataSet;
            HepatitisDataSetInformation.ExistenceOfIdentification=IdentificationNonExistence;
            HepatitisDataSetInformation.DataTypeOfEachAttributeInDataSet=DataTypeOfEachAttributeInHepatitisDataSet;
            HepatitisDataSetInformation.NumberOfCategoryOfEachAttributeValueInDataSet=NumberOfCategoryOfEachAttributeValueInHepatitisDataSet;
            HepatitisDataSetInformation.NumberOfCategoryOfClassInDataSet=NumberOfCategoryOfClassInHepatitisDataSet;
                DataSet=(double**)malloc(NumberOfInstanceInHepatitisDataSet*sizeof(double*));
                for(int InstncQntty=0;InstncQntty<NumberOfInstanceInHepatitisDataSet;InstncQntty++){
                    DataSet[InstncQntty]=(double*)malloc((NumberOfAttributeInHepatitisDataSet+NumberOfClassInHepatitisDataSet)*sizeof(double));
                }
                for(int InstncQntty=0;InstncQntty<NumberOfInstanceInHepatitisDataSet;InstncQntty++){
                    for(int FtrQntty=0;FtrQntty<(NumberOfAttributeInHepatitisDataSet+NumberOfClassInHepatitisDataSet);FtrQntty++){
                        DataSet[InstncQntty][FtrQntty]=HepatitisDataSet[InstncQntty][FtrQntty+IdentificationNonExistence];
                    }
                }
    HepatitisDataSetInformation.DataSet=DataSet;
    Identification(HepatitisDataSetInformation);
    struct  DataSetInformationDataType  ImageSegementationDataSetInformation;
            ImageSegementationDataSetInformation.IdentificationOfUCIDataSet=3;
            ImageSegementationDataSetInformation.NumberOfInstanceInDataSet=NumberOfInstanceInImageSegementationDataSet;
            ImageSegementationDataSetInformation.NumberOfAttributeInDataSet=NumberOfAttributeInImageSegementationDataSet;
            ImageSegementationDataSetInformation.NumberOfClassInDataSet=NumberOfClassInImageSegementationDataSet;
            ImageSegementationDataSetInformation.ExistenceOfIdentification=IdentificationNonExistence;
            ImageSegementationDataSetInformation.DataTypeOfEachAttributeInDataSet=DataTypeOfEachAttributeInImageSegementationDataSet;
            ImageSegementationDataSetInformation.NumberOfCategoryOfEachAttributeValueInDataSet=NumberOfCategoryOfEachAttributeValueInImageSegementationDataSet;
            ImageSegementationDataSetInformation.NumberOfCategoryOfClassInDataSet=NumberOfCategoryOfClassInImageSegementationDataSet;
                DataSet=(double**)malloc(NumberOfInstanceInImageSegementationDataSet*sizeof(double*));
                for(int InstncQntty=0;InstncQntty<NumberOfInstanceInImageSegementationDataSet;InstncQntty++){
                    DataSet[InstncQntty]=(double*)malloc((NumberOfAttributeInImageSegementationDataSet+NumberOfClassInImageSegementationDataSet)*sizeof(double));
                }
                for(int InstncQntty=0;InstncQntty<NumberOfInstanceInImageSegementationDataSet;InstncQntty++){
                    for(int FtrQntty=0;FtrQntty<(NumberOfAttributeInImageSegementationDataSet+NumberOfClassInImageSegementationDataSet);FtrQntty++){
                        DataSet[InstncQntty][FtrQntty]=ImageSegementationDataSet[InstncQntty][FtrQntty+IdentificationNonExistence];
                    }
                }
    ImageSegementationDataSetInformation.DataSet=DataSet;
    Identification(ImageSegementationDataSetInformation);
    struct  DataSetInformationDataType  LiverDisordersDataSetInformation;
            LiverDisordersDataSetInformation.IdentificationOfUCIDataSet=4;
            LiverDisordersDataSetInformation.NumberOfInstanceInDataSet=NumberOfInstanceInLiverDisordersDataSet;
            LiverDisordersDataSetInformation.NumberOfAttributeInDataSet=NumberOfAttributeInLiverDisordersDataSet;
            LiverDisordersDataSetInformation.NumberOfClassInDataSet=NumberOfClassInLiverDisordersDataSet;
            LiverDisordersDataSetInformation.ExistenceOfIdentification=IdentificationNonExistence;
            LiverDisordersDataSetInformation.DataTypeOfEachAttributeInDataSet=DataTypeOfEachAttributeInLiverDisordersDataSet;
            LiverDisordersDataSetInformation.NumberOfCategoryOfEachAttributeValueInDataSet=NumberOfCategoryOfEachAttributeValueInLiverDisordersDataSet;
            LiverDisordersDataSetInformation.NumberOfCategoryOfClassInDataSet=NumberOfCategoryOfClassInLiverDisordersDataSet;
                DataSet=(double**)malloc(NumberOfInstanceInLiverDisordersDataSet*sizeof(double*));
                for(int InstncQntty=0;InstncQntty<NumberOfInstanceInLiverDisordersDataSet;InstncQntty++){
                    DataSet[InstncQntty]=(double*)malloc((NumberOfAttributeInLiverDisordersDataSet+NumberOfClassInLiverDisordersDataSet)*sizeof(double));
                }
                for(int InstncQntty=0;InstncQntty<NumberOfInstanceInLiverDisordersDataSet;InstncQntty++){
                    for(int FtrQntty=0;FtrQntty<(NumberOfAttributeInLiverDisordersDataSet+NumberOfClassInLiverDisordersDataSet);FtrQntty++){
                        DataSet[InstncQntty][FtrQntty]=LiverDisordersDataSet[InstncQntty][FtrQntty+IdentificationNonExistence];
                    }
                }
    LiverDisordersDataSetInformation.DataSet=DataSet;
    Identification(LiverDisordersDataSetInformation);
}
void Identification(struct  DataSetInformationDataType  UCIDataSetInformation){
    int     IdentificationOfUCIDataSet;
            IdentificationOfUCIDataSet=UCIDataSetInformation.IdentificationOfUCIDataSet;
    int     NumberOfInstanceInDataSet;
            NumberOfInstanceInDataSet=UCIDataSetInformation.NumberOfInstanceInDataSet;
    int     NumberOfAttributeInDataSet;
            NumberOfAttributeInDataSet=UCIDataSetInformation.NumberOfAttributeInDataSet;
    int     NumberOfClassInDataSet;
            NumberOfClassInDataSet=UCIDataSetInformation.NumberOfClassInDataSet;
    int*    NumberOfCategoryOfEachAttributeValueInDataSet;
            NumberOfCategoryOfEachAttributeValueInDataSet=UCIDataSetInformation.NumberOfCategoryOfEachAttributeValueInDataSet;
    int     NumberOfCategoryOfClassInDataSet;
            NumberOfCategoryOfClassInDataSet=UCIDataSetInformation.NumberOfCategoryOfClassInDataSet;
    int*    DataTypeOfEachAttributeInDataSet;
            DataTypeOfEachAttributeInDataSet=UCIDataSetInformation.DataTypeOfEachAttributeInDataSet;
    int     ExistenceOfIdentification;
            ExistenceOfIdentification=UCIDataSetInformation.ExistenceOfIdentification;
    double**    DataSet;
                DataSet=UCIDataSetInformation.DataSet;
    switch(IdentificationOfUCIDataSet){
        case 1:
            printf("_____________________\n");
            printf("---------------------\n");
            printf("GlassIdentification:\n");
            printf("_____________________\n");
            printf("---------------------\n");
            break;
        case 2:
            printf("___________\n");
            printf("-----------\n");
            printf("Hepatitis:\n");
            printf("___________\n");
            printf("-----------\n");
            break;
        case 3:
            printf("____________________\n");
            printf("--------------------\n");
            printf("ImageSegementation:\n");
            printf("____________________\n");
            printf("--------------------\n");
            break;
        default:
            printf("________________\n");
            printf("----------------\n");
            printf("LiverDisorders:\n");
            printf("________________\n");
            printf("----------------\n");
    }
    printf("\n");
    printf("\n");
    struct  DataSetInformationDataType DataSetInformation;
            DataSetInformation.DataSet=DataSet;
            DataSetInformation.NumberOfInstanceInDataSet=NumberOfInstanceInDataSet;
            DataSetInformation.NumberOfAttributeInDataSet=NumberOfAttributeInDataSet;
            DataSetInformation.NumberOfClassInDataSet=NumberOfClassInDataSet;
            DataSetInformation.DataTypeOfEachAttributeInDataSet=DataTypeOfEachAttributeInDataSet;
    Discretization(DataSetInformation);
    struct  TrainningAndTestingDataSetInformationDataTyp TrainningAndTestingDataSetInformation;
            TrainningAndTestingDataSetInformation=TrainningAndTestingDataSetGeneration(DataSetInformation);
    DataSetInformation.NumberOfCategoryOfEachAttributeValueInDataSet=NumberOfCategoryOfEachAttributeValueInDataSet;
    DataSetInformation.NumberOfCategoryOfClassInDataSet=NumberOfCategoryOfClassInDataSet;
    struct  MapOfCharacteristicInDataSetInformationDataType MapOfCharacteristicInDataSetInformation;
            MapOfCharacteristicInDataSetInformation=Geocoding(DataSetInformation);
    int***  MapOfAttributeValueInDataSet;
            MapOfAttributeValueInDataSet=MapOfCharacteristicInDataSetInformation.MapOfAttributeValueInDataSet;
    int**   MapOfClassValueInDataSet;
            MapOfClassValueInDataSet=MapOfCharacteristicInDataSetInformation.MapOfClassValueInDataSet;
    int**   NumberOfEachAttributeValue;
            NumberOfEachAttributeValue=MapOfCharacteristicInDataSetInformation.NumberOfEachAttributeValue;
    int*    NumberOfEachClassValue;
            NumberOfEachClassValue=MapOfCharacteristicInDataSetInformation.NumberOfEachClassValue;
    int***  InstanceOfDataSetDistribution;
            InstanceOfDataSetDistribution=ClassConditionalDistribution(DataSetInformation,MapOfCharacteristicInDataSetInformation);
    for(int Fld=0;Fld<NumberOfFolds;Fld++){
        printf("Fold:\t%d\n",Fld+1);
        printf("----------\n");
        printf("\n");
        printf("\n");
        int*        TestingDataSetIdentification;
                    TestingDataSetIdentification=TrainningAndTestingDataSetInformation.TestingDataSet[Fld];
        int         NumberOfInstanceInTestingDataSet;
                    NumberOfInstanceInTestingDataSet=TrainningAndTestingDataSetInformation.NumberOfInstanceInTestingDataSet[Fld];
        int         NumberOfAttributeInTestingDataSet;
                    NumberOfAttributeInTestingDataSet=NumberOfAttributeInDataSet;
        int         NumberOfClassInTestingDataSet;
                    NumberOfClassInTestingDataSet=NumberOfClassInDataSet;
        double**    TestingDataSet;
                    TestingDataSet=(double**)malloc(NumberOfInstanceInTestingDataSet*sizeof(double*));
        for(int TstngDtStInstncQntty=0;TstngDtStInstncQntty<NumberOfInstanceInTestingDataSet;TstngDtStInstncQntty++){
            TestingDataSet[TstngDtStInstncQntty]=(double*)malloc((NumberOfAttributeInDataSet+NumberOfClassInDataSet)*sizeof(double));
        }
        for(int TstngDtStInstncQntty=0;TstngDtStInstncQntty<NumberOfInstanceInTestingDataSet;TstngDtStInstncQntty++){
            for(int TstngDtStFtrQntty=0;TstngDtStFtrQntty<NumberOfAttributeInDataSet+NumberOfClassInDataSet;TstngDtStFtrQntty++){
                TestingDataSet[TstngDtStInstncQntty][TstngDtStFtrQntty]=DataSet[TestingDataSetIdentification[TstngDtStInstncQntty]-1][TstngDtStFtrQntty];
            }
        }
        int*    NumberOfCategoryOfEachAttributeValueInTestingDataSet;
                NumberOfCategoryOfEachAttributeValueInTestingDataSet=(int*)malloc(NumberOfAttributeInTestingDataSet*sizeof(int));
                NumberOfCategoryOfEachAttributeValueInTestingDataSet=NumberOfCategoryOfEachAttributeValueInDataSet;
        int     NumberOfCategoryOfClassInTestingDataSet;
                NumberOfCategoryOfClassInTestingDataSet=NumberOfCategoryOfClassInDataSet;
        struct  DataSetInformationDataType TestingDataSetInformation;
                TestingDataSetInformation.DataSet=TestingDataSet;
                TestingDataSetInformation.NumberOfInstanceInDataSet=NumberOfInstanceInTestingDataSet;
                TestingDataSetInformation.NumberOfAttributeInDataSet=NumberOfAttributeInTestingDataSet;
                TestingDataSetInformation.NumberOfClassInDataSet=NumberOfClassInTestingDataSet;
                TestingDataSetInformation.NumberOfCategoryOfEachAttributeValueInDataSet=NumberOfCategoryOfEachAttributeValueInTestingDataSet;
                TestingDataSetInformation.NumberOfCategoryOfClassInDataSet=NumberOfCategoryOfClassInTestingDataSet;
        struct  MapOfCharacteristicInDataSetInformationDataType MapOfCharacteristicInTestingDataSetInformation;
                MapOfCharacteristicInTestingDataSetInformation=Geocoding(TestingDataSetInformation);
        int***  MapOfAttributeValueInTestingDataSet;
                MapOfAttributeValueInTestingDataSet=MapOfCharacteristicInTestingDataSetInformation.MapOfAttributeValueInDataSet;
        int**   MapOfClassValueInTestingDataSet;
                MapOfClassValueInTestingDataSet=MapOfCharacteristicInTestingDataSetInformation.MapOfClassValueInDataSet;
        int**   NumberOfEachAttributeValueInTestingDataSet;
                NumberOfEachAttributeValueInTestingDataSet=MapOfCharacteristicInTestingDataSetInformation.NumberOfEachAttributeValue;
        int*    NumberOfEachClassValueInTestingDataSet;
                NumberOfEachClassValueInTestingDataSet=MapOfCharacteristicInTestingDataSetInformation.NumberOfEachClassValue;
        int***  InstanceOfTestingDataSetDistribution;
                InstanceOfTestingDataSetDistribution=ClassConditionalDistribution(TestingDataSetInformation,MapOfCharacteristicInTestingDataSetInformation);
        int     NumberOfAttributeInTrainningDataSet;
                NumberOfAttributeInTrainningDataSet=NumberOfAttributeInDataSet;
        int*    NumberOfCategoryOfEachAttributeValueInTrainningDataSet;
                NumberOfCategoryOfEachAttributeValueInTrainningDataSet=(int*)malloc(NumberOfAttributeInTrainningDataSet*sizeof(int));
                NumberOfCategoryOfEachAttributeValueInTrainningDataSet= NumberOfCategoryOfEachAttributeValueInDataSet;
        int     NumberOfCategoryOfClassInTrainningDataSet;
                NumberOfCategoryOfClassInTrainningDataSet=NumberOfCategoryOfClassInDataSet;
        
        int***  InstanceOfTrainningDataSetDistribution;
                InstanceOfTrainningDataSetDistribution=(int***)malloc(NumberOfCategoryOfClassInTrainningDataSet*sizeof(int**));
                for(int iota=0;iota<NumberOfCategoryOfClassInTrainningDataSet;iota++){
                    InstanceOfTrainningDataSetDistribution[iota]=(int**)malloc(NumberOfAttributeInTrainningDataSet*sizeof(int*));
                    for(int yodh=0;yodh<NumberOfAttributeInTrainningDataSet;yodh++){
                        InstanceOfTrainningDataSetDistribution[iota][yodh]=(int*)malloc(NumberOfCategoryOfEachAttributeValueInTrainningDataSet[yodh]*sizeof(int));
                    }
                }
        for(int iota=0;iota<NumberOfCategoryOfClassInTrainningDataSet;iota++){
            for(int yodh=0;yodh<NumberOfAttributeInTrainningDataSet;yodh++){
                for(int yod=0;yod<NumberOfCategoryOfEachAttributeValueInTrainningDataSet[yodh];yod++){
                    InstanceOfTrainningDataSetDistribution[iota][yodh][yod]=InstanceOfDataSetDistribution[iota][yodh][yod]-InstanceOfTestingDataSetDistribution[iota][yodh][yod];
                }
            }
        }
        for(int iota=0;iota<NumberOfCategoryOfClassInTrainningDataSet;iota++){
            for(int yodh=0;yodh<NumberOfAttributeInTrainningDataSet;yodh++){
                for(int yod=0;yod<NumberOfCategoryOfEachAttributeValueInTrainningDataSet[yodh];yod++){
                    InstanceOfTrainningDataSetDistribution[iota][yodh][yod]=InstanceOfTrainningDataSetDistribution[iota][yodh][yod]+1;
                }
            }
        }
        int** TotalNumberOfInstanceOfEachAttributeConditionOnEachClass;
              TotalNumberOfInstanceOfEachAttributeConditionOnEachClass=(int**)malloc(NumberOfCategoryOfClassInTrainningDataSet*sizeof(int*));
        for(int i=0;i<NumberOfCategoryOfClassInTrainningDataSet;i++){
            TotalNumberOfInstanceOfEachAttributeConditionOnEachClass[i]=(int*)malloc(NumberOfAttributeInTrainningDataSet*sizeof(int));
        }
        for(int iota=0;iota<NumberOfCategoryOfClassInTrainningDataSet;iota++){
            for(int yodh=0;yodh<NumberOfAttributeInTrainningDataSet;yodh++){
                TotalNumberOfInstanceOfEachAttributeConditionOnEachClass[iota][yodh]=0;
            }
        }
        for(int iota=0;iota<NumberOfCategoryOfClassInTrainningDataSet;iota++){
            for(int yodh=0;yodh<NumberOfAttributeInTrainningDataSet;yodh++){
                for(int yod=0;yod<NumberOfCategoryOfEachAttributeValueInTrainningDataSet[yodh];yod++){
                    TotalNumberOfInstanceOfEachAttributeConditionOnEachClass[iota][yodh]=TotalNumberOfInstanceOfEachAttributeConditionOnEachClass[iota][yodh]+InstanceOfTrainningDataSetDistribution[iota][yodh][yod];
                }
            }
        }
        double*** ClassConditionalProbability;
                  ClassConditionalProbability=(double***)malloc(NumberOfCategoryOfClassInTrainningDataSet*sizeof(double**));
        for(int iota=0;iota<NumberOfCategoryOfClassInTrainningDataSet;iota++){
            ClassConditionalProbability[iota]=(double**)malloc(NumberOfAttributeInTrainningDataSet*sizeof(double*));
            for(int yodh=0;yodh<NumberOfAttributeInTrainningDataSet;yodh++){
                ClassConditionalProbability[iota][yodh]=(double*)malloc(NumberOfCategoryOfEachAttributeValueInTrainningDataSet[yodh]*sizeof(double));
            }
        }
        for(int iota=0;iota<NumberOfCategoryOfClassInTrainningDataSet;iota++){
            ClassConditionalProbability[iota]=(double**)malloc(NumberOfAttributeInTrainningDataSet*sizeof(double*));
            for(int yodh=0;yodh<NumberOfAttributeInTrainningDataSet;yodh++){
                ClassConditionalProbability[iota][yodh]=(double*)malloc(NumberOfCategoryOfEachAttributeValueInTrainningDataSet[yodh]*sizeof(double));
            }
        }
        for(int iota=0;iota<NumberOfCategoryOfClassInTrainningDataSet;iota++){
            for(int yodh=0;yodh<NumberOfAttributeInTrainningDataSet;yodh++){
                for(int yod=0;yod<NumberOfCategoryOfEachAttributeValueInTrainningDataSet[yodh];yod++){
                    if(TotalNumberOfInstanceOfEachAttributeConditionOnEachClass[iota][yodh]!=0){ ClassConditionalProbability[iota][yodh][yod]=(double)InstanceOfTrainningDataSetDistribution[iota][yodh][yod]/(double)TotalNumberOfInstanceOfEachAttributeConditionOnEachClass[iota][yodh];
                    }else{
                        ClassConditionalProbability[iota][yodh][yod]=0;
                    }
                }
            }
        }
        int* NumberOfInstanceOfEachClassValueInTestingDataSet;
             NumberOfInstanceOfEachClassValueInTestingDataSet=(int*)malloc(NumberOfCategoryOfClassInTestingDataSet*sizeof(int));
        for(int iota=0;iota<NumberOfInstanceInTestingDataSet;iota++){
            NumberOfInstanceOfEachClassValueInTestingDataSet[iota]=0;
        }
        for(int yodh=0;yodh<NumberOfCategoryOfClassInTestingDataSet;yodh++){
            for(int iota=0;iota<NumberOfInstanceInTestingDataSet;iota++){
                if(TestingDataSet[iota][NumberOfAttributeInTestingDataSet+NumberOfClassInTestingDataSet-1]==yodh+1){
                    NumberOfInstanceOfEachClassValueInTestingDataSet[yodh]=NumberOfInstanceOfEachClassValueInTestingDataSet[yodh]+1;
                }
            }
        }
        int* NumberOfInstanceOfEachClassValueInTrainningDataSet;
             NumberOfInstanceOfEachClassValueInTrainningDataSet=(int*)malloc(NumberOfCategoryOfClassInTrainningDataSet*sizeof(int));
        for(int iota=0;iota<NumberOfCategoryOfClassInTrainningDataSet;iota++){
            NumberOfInstanceOfEachClassValueInTrainningDataSet[iota]=0;
        }
        for(int iota=0;iota<NumberOfCategoryOfClassInTrainningDataSet;iota++){
            NumberOfInstanceOfEachClassValueInTrainningDataSet[iota]=NumberOfEachClassValue[iota]-NumberOfInstanceOfEachClassValueInTestingDataSet[iota];
        }
        int TotalNumberOfInstanceOfAllClassValueInTrainningDataSet;
            TotalNumberOfInstanceOfAllClassValueInTrainningDataSet=NumberOfInstanceInDataSet-NumberOfInstanceInTestingDataSet;
        double* ProbabilityOfEachClassValueInTrainningDataSet;
                ProbabilityOfEachClassValueInTrainningDataSet=(double*)malloc(NumberOfCategoryOfClassInTrainningDataSet*sizeof(double));
        
        for(int iota=0;iota<NumberOfCategoryOfClassInTrainningDataSet;iota++){
            ProbabilityOfEachClassValueInTrainningDataSet[iota]=(double)NumberOfInstanceOfEachClassValueInTrainningDataSet[iota]/(double)TotalNumberOfInstanceOfAllClassValueInTrainningDataSet;
        }
        struct BayesinaClassifierModelDataType BayesinaClassifierModel;
               BayesinaClassifierModel.ProbabilityOfEachAttributeValueGivenOnEachClassValue=ClassConditionalProbability;
               BayesinaClassifierModel.ProbabilityOfEachClassValue=ProbabilityOfEachClassValueInTrainningDataSet;
        int* AttributePriority;
        AttributePriority=SelectiveNaÃ¯veBayesian(DataSet,BayesinaClassifierModel,TestingDataSetInformation);
        
        //Dirichlet
        printf("Dirichlet:");
        printf("\n");
        printf("\n");
        double  FinalDirichletAccuracy;
                FinalDirichletAccuracy=0;
        int*    FinalDirichletAlphaValue;
                FinalDirichletAlphaValue=(int*)malloc(NumberOfAttributeInTrainningDataSet*sizeof(int));
        int**** AlphaValueOfEachAttributeValueOfEachAttribuetOfEachClass;
        AlphaValueOfEachAttributeValueOfEachAttribuetOfEachClass=(int****)malloc((alpha)*sizeof(int***));
        for(int Alph=0;Alph<alpha;Alph++){
             AlphaValueOfEachAttributeValueOfEachAttribuetOfEachClass[Alph]=(int***)malloc(NumberOfCategoryOfClassInTrainningDataSet*sizeof(int**));
            for(int ClsVl=0;ClsVl<NumberOfCategoryOfClassInTrainningDataSet;ClsVl++){
                AlphaValueOfEachAttributeValueOfEachAttribuetOfEachClass[Alph][ClsVl]=(int**)malloc(NumberOfAttributeInTrainningDataSet*sizeof(int*));
                for(int Atrbt=0;Atrbt<NumberOfAttributeInTrainningDataSet;Atrbt++){
                    AlphaValueOfEachAttributeValueOfEachAttribuetOfEachClass[Alph][ClsVl][Atrbt]=(int*)malloc(NumberOfCategoryOfEachAttributeValueInTrainningDataSet[Atrbt]*sizeof(int));
                }
            }
        }
        for(int Alph=0;Alph<alpha;Alph++){
            for(int ClsVl=0;ClsVl<NumberOfCategoryOfClassInTrainningDataSet;ClsVl++){
                for(int Atrbt=0;Atrbt<NumberOfAttributeInTrainningDataSet;Atrbt++){
                    for(int AtrbtVl=0;AtrbtVl<NumberOfCategoryOfEachAttributeValueInTrainningDataSet[Atrbt];AtrbtVl++){
                        AlphaValueOfEachAttributeValueOfEachAttribuetOfEachClass[Alph][ClsVl][Atrbt][AtrbtVl]=InstanceOfTrainningDataSetDistribution[ClsVl][Atrbt][AtrbtVl];
                    }
                }
            }
        }
        for(int Alph=0;Alph<alpha;Alph++){
            for(int ClsVl=0;ClsVl<NumberOfCategoryOfClassInTrainningDataSet;ClsVl++){
                for(int Atrbt=0;Atrbt<NumberOfAttributeInTrainningDataSet;Atrbt++){
                    for(int AtrbtVl=0;AtrbtVl<NumberOfCategoryOfEachAttributeValueInTrainningDataSet[Atrbt];AtrbtVl++){
                        AlphaValueOfEachAttributeValueOfEachAttribuetOfEachClass[Alph][ClsVl][Atrbt][AtrbtVl]=AlphaValueOfEachAttributeValueOfEachAttribuetOfEachClass[Alph][ClsVl][Atrbt][AtrbtVl]+Alph;
                    }
                }
            }
        }
        double**** PosteriorProbabilityOdDirichlet;
        PosteriorProbabilityOdDirichlet=(double****)malloc((alpha)*sizeof(double***));
        for(int Alph=0;Alph<alpha;Alph++){
             PosteriorProbabilityOdDirichlet[Alph]=(double***)malloc(NumberOfCategoryOfClassInTrainningDataSet*sizeof(double**));
            for(int ClsVl=0;ClsVl<NumberOfCategoryOfClassInTrainningDataSet;ClsVl++){
                PosteriorProbabilityOdDirichlet[Alph][ClsVl]=(double**)malloc(NumberOfAttributeInTrainningDataSet*sizeof(double*));
                for(int Atrbt=0;Atrbt<NumberOfAttributeInTrainningDataSet;Atrbt++){
                    PosteriorProbabilityOdDirichlet[Alph][ClsVl][Atrbt]=(double*)malloc(NumberOfCategoryOfEachAttributeValueInTrainningDataSet[Atrbt]*sizeof(double));
                }
            }
        }
        for(int Alph=0;Alph<alpha;Alph++){
            for(int ClsVl=0;ClsVl<NumberOfCategoryOfClassInTrainningDataSet;ClsVl++){
                for(int Atrbt=0;Atrbt<NumberOfAttributeInTrainningDataSet;Atrbt++){
                    int CumulativeNumber;
                        CumulativeNumber=0;
                    for(int AtrbtVl=0;AtrbtVl<NumberOfCategoryOfEachAttributeValueInTrainningDataSet[Atrbt];AtrbtVl++){
                        CumulativeNumber=CumulativeNumber+AlphaValueOfEachAttributeValueOfEachAttribuetOfEachClass[Alph][ClsVl][Atrbt][AtrbtVl];
                    }
                    for(int AtrbtVl=0;AtrbtVl<NumberOfCategoryOfEachAttributeValueInTrainningDataSet[Atrbt];AtrbtVl++){
                        PosteriorProbabilityOdDirichlet[Alph][ClsVl][Atrbt][AtrbtVl]=(double)AlphaValueOfEachAttributeValueOfEachAttribuetOfEachClass[Alph][ClsVl][Atrbt][AtrbtVl]/(double)CumulativeNumber;
                    }
                }
            }
        }
        int NumberOfClassInTrainningDataSet;
            NumberOfClassInTrainningDataSet=NumberOfClassInTestingDataSet;
        int* AlphaValue;
             AlphaValue=(int*)malloc(NumberOfAttributeInTrainningDataSet*sizeof(int));
        for(int Atrbt=0;Atrbt<NumberOfAttributeInTrainningDataSet;Atrbt++){
            AlphaValue[Atrbt]=1;
        }
        for(int PrrAtrbt=0;PrrAtrbt<NumberOfAttributeInTrainningDataSet;PrrAtrbt++){
            int Maximum;
            Maximum=0;
            int Index;
            Index=0;
            for(int Alph=0;Alph<alpha;Alph++){
                if(Alph!=0){
                    AlphaValue[AttributePriority[PrrAtrbt]-1]=AlphaValue[AttributePriority[PrrAtrbt]-1]+1;
                }
                int CumulativeNumber;
                    CumulativeNumber=0;
                double Accuracy;
                       Accuracy=0;
                for(int Instnc=0;Instnc<NumberOfInstanceInTestingDataSet;Instnc++){
                    double* ProbabilityOfTestingDataGivenOnClassValue;
                        ProbabilityOfTestingDataGivenOnClassValue=(double*)malloc(NumberOfCategoryOfClassInTestingDataSet*sizeof(double));
                    for(int i=0;i<NumberOfCategoryOfClassInTestingDataSet;i++){
                        ProbabilityOfTestingDataGivenOnClassValue[i]=0;
                    }
                    double Maximum;
                           Maximum=0;
                    int Index;
                        Index=0;
                    for(int Cls=0;Cls<NumberOfCategoryOfClassInTestingDataSet;Cls++){
                        ProbabilityOfTestingDataGivenOnClassValue[Cls]=ProbabilityOfEachClassValueInTrainningDataSet[Cls];
                        for(int Atrbt=0;Atrbt<NumberOfAttributeInTestingDataSet;Atrbt++){
                            int Number=TestingDataSet[Instnc][Atrbt];
                             ProbabilityOfTestingDataGivenOnClassValue[Cls]=ProbabilityOfTestingDataGivenOnClassValue[Cls]*PosteriorProbabilityOdDirichlet[AlphaValue[Atrbt]-1][Cls][Atrbt][Number-1];
                        }
                        if(ProbabilityOfTestingDataGivenOnClassValue[Cls]>Maximum){
                            Maximum=ProbabilityOfTestingDataGivenOnClassValue[Cls];
                            Index=Cls;
                        }
                    }
                    if(Index+1==TestingDataSet[Instnc][NumberOfAttributeInTrainningDataSet+NumberOfClassInTrainningDataSet-1]){
                        CumulativeNumber++;
                    }
                }
                if(CumulativeNumber>Maximum){
                    Maximum=CumulativeNumber;
                    FinalDirichletAccuracy=Maximum;
                    Index=Alph+1;
                }
                AlphaValue[AttributePriority[PrrAtrbt]-1]=Index;
                FinalDirichletAlphaValue=AlphaValue;
            }
        }
        //Result of Dirichlet.
        for(int PrrAtrbt=0;PrrAtrbt<NumberOfAttributeInTrainningDataSet;PrrAtrbt++){
            printf("%2d\t",FinalDirichletAlphaValue[PrrAtrbt]);
        }printf("\n");
        printf("Accuracy:\t%2f\n",FinalDirichletAccuracy/(double)NumberOfInstanceInTestingDataSet);
        printf("\n");
        printf("\n");
        //General Dirichlet
        printf("General Dirichlet:");
        printf("\n");
        printf("\n");
        double  FinalGeneralDirichletAccuracy;
                FinalGeneralDirichletAccuracy=0;
        int**   FinalGeneralDirichletAlphaValue;
                FinalGeneralDirichletAlphaValue=(int**)malloc(NumberOfAttributeInTrainningDataSet*sizeof(int*));
        for(int Atrbt=0;Atrbt<NumberOfAttributeInTrainningDataSet;Atrbt++){
            FinalGeneralDirichletAlphaValue[Atrbt]=(int*)malloc((NumberOfCategoryOfEachAttributeValueInTrainningDataSet[Atrbt]-1)*sizeof(int));
        }
        
        for(int iota=0;iota<NumberOfCategoryOfClassInTrainningDataSet;iota++){
            for(int yodh=0;yodh<NumberOfAttributeInTrainningDataSet;yodh++){
                for(int yod=0;yod<NumberOfCategoryOfEachAttributeValueInTrainningDataSet[yodh];yod++){
                    InstanceOfTrainningDataSetDistribution[iota][yodh][yod]=InstanceOfTrainningDataSetDistribution[iota][yodh][yod]-1;
                }
            }
        }
        int** AlphaValueInGeneralDirichlet;
              AlphaValueInGeneralDirichlet=(int**)malloc(NumberOfAttributeInTrainningDataSet*sizeof(int*));
        for(int Atrbt=0;Atrbt<NumberOfAttributeInTrainningDataSet;Atrbt++){
            AlphaValueInGeneralDirichlet[Atrbt]=(int*)malloc((NumberOfCategoryOfEachAttributeValueInTrainningDataSet[Atrbt]-1)*sizeof(int));
        }
        for(int Atrbt=0;Atrbt<NumberOfAttributeInTrainningDataSet;Atrbt++){
            for(int AtrbtVl=0;AtrbtVl<NumberOfCategoryOfEachAttributeValueInTrainningDataSet[Atrbt]-1;AtrbtVl++){
                AlphaValueInGeneralDirichlet[Atrbt][AtrbtVl]=1;
            }
        }
        int*** CumulativeNumberOfInstanceOfTrainningDataSet;
              CumulativeNumberOfInstanceOfTrainningDataSet=(int***)malloc(NumberOfCategoryOfClassInTrainningDataSet*(sizeof(int**)));
        for(int Cls=0;Cls<NumberOfCategoryOfClassInTrainningDataSet;Cls++){
            CumulativeNumberOfInstanceOfTrainningDataSet[Cls]=(int**)malloc(NumberOfAttributeInTrainningDataSet*sizeof(int*));
            for(int Atrbt=0;Atrbt<NumberOfAttributeInTrainningDataSet;Atrbt++){
                CumulativeNumberOfInstanceOfTrainningDataSet[Cls][Atrbt]=(int*)malloc(NumberOfCategoryOfEachAttributeValueInTrainningDataSet[Atrbt]*sizeof(int));
            }
        }
        for(int Cls=0;Cls<NumberOfCategoryOfClassInTrainningDataSet;Cls++){
            for(int Atrbt=0;Atrbt<NumberOfAttributeInTrainningDataSet;Atrbt++){
                for(int AtrbtVl=0;AtrbtVl<NumberOfCategoryOfEachAttributeValueInTrainningDataSet[Atrbt];AtrbtVl++){
                    CumulativeNumberOfInstanceOfTrainningDataSet[Cls][Atrbt][AtrbtVl]=0;
                }
            }
        }
        for(int Cls=0;Cls<NumberOfCategoryOfClassInTrainningDataSet;Cls++){
            for(int Atrbt=0;Atrbt<NumberOfAttributeInTrainningDataSet;Atrbt++){
                for(int AtrbtVl=NumberOfCategoryOfEachAttributeValueInTrainningDataSet[Atrbt]-1;AtrbtVl>=0;AtrbtVl--){
                    if(AtrbtVl==NumberOfCategoryOfEachAttributeValueInTrainningDataSet[Atrbt]-1){
                        CumulativeNumberOfInstanceOfTrainningDataSet[Cls][Atrbt][AtrbtVl]=InstanceOfTrainningDataSetDistribution[Cls][Atrbt][AtrbtVl];
                    }else{ CumulativeNumberOfInstanceOfTrainningDataSet[Cls][Atrbt][AtrbtVl]=CumulativeNumberOfInstanceOfTrainningDataSet[Cls][Atrbt][AtrbtVl+1]+InstanceOfTrainningDataSetDistribution[Cls][Atrbt][AtrbtVl];
                    }
                }
            }
        }
        double**** ZProng;
        ZProng=(double****)malloc(alpha*sizeof(int***));
        for(int Alph=0;Alph<alpha;Alph++){
            ZProng[Alph]=(double***)malloc(NumberOfCategoryOfClassInTrainningDataSet*(sizeof(double**)));
            for(int Cls=0;Cls<NumberOfCategoryOfClassInTrainningDataSet;Cls++){
                ZProng[Alph][Cls]=(double**)malloc(NumberOfAttributeInTrainningDataSet*sizeof(double*));
                for(int Atrbt=0;Atrbt<NumberOfAttributeInTrainningDataSet;Atrbt++){
                    ZProng[Alph][Cls][Atrbt]=(double*)malloc((NumberOfCategoryOfEachAttributeValueInTrainningDataSet[Atrbt]-1)*sizeof(double));
                }
            }
        }
        for(int Alph=0;Alph<alpha;Alph++){
            for(int Cls=0;Cls<NumberOfCategoryOfClassInTrainningDataSet;Cls++){
                for(int Atrbt=0;Atrbt<NumberOfAttributeInTrainningDataSet;Atrbt++){
                    for(int AtrbtVl=0;AtrbtVl<(NumberOfCategoryOfEachAttributeValueInTrainningDataSet[Atrbt]-1);AtrbtVl++){
                        ZProng[Alph][Cls][Atrbt][AtrbtVl]=(double)((Alph+1)+InstanceOfTrainningDataSetDistribution[Cls][Atrbt][AtrbtVl])/(double)(((NumberOfCategoryOfEachAttributeValueInTrainningDataSet[Atrbt]+1-(AtrbtVl+1))*(Alph+1))+CumulativeNumberOfInstanceOfTrainningDataSet[Cls][Atrbt][AtrbtVl]);
                    }
                }
            }
        }
        double**** OneMinusZProng;
        OneMinusZProng=(double****)malloc(alpha*sizeof(int***));
        for(int Alph=0;Alph<alpha;Alph++){
            OneMinusZProng[Alph]=(double***)malloc(NumberOfCategoryOfClassInTrainningDataSet*(sizeof(double**)));
            for(int Cls=0;Cls<NumberOfCategoryOfClassInTrainningDataSet;Cls++){
                OneMinusZProng[Alph][Cls]=(double**)malloc(NumberOfAttributeInTrainningDataSet*sizeof(double*));
                for(int Atrbt=0;Atrbt<NumberOfAttributeInTrainningDataSet;Atrbt++){
                    OneMinusZProng[Alph][Cls][Atrbt]=(double*)malloc((NumberOfCategoryOfEachAttributeValueInTrainningDataSet[Atrbt]-1)*sizeof(double));
                }
            }
        }
        for(int Alph=0;Alph<alpha;Alph++){
            for(int Cls=0;Cls<NumberOfCategoryOfClassInTrainningDataSet;Cls++){
                for(int Atrbt=0;Atrbt<NumberOfAttributeInTrainningDataSet;Atrbt++){
                    for(int AtrbtVl=0;AtrbtVl<(NumberOfCategoryOfEachAttributeValueInTrainningDataSet[Atrbt]-1);AtrbtVl++){
                        OneMinusZProng[Alph][Cls][Atrbt][AtrbtVl]=1-ZProng[Alph][Cls][Atrbt][AtrbtVl];
                    }
                }
            }
        }
        for(int AlphAtrbt=0;AlphAtrbt<NumberOfAttributeInTrainningDataSet;AlphAtrbt++){
            for(int AlphAtrbtVl=0;AlphAtrbtVl<NumberOfCategoryOfEachAttributeValueInTrainningDataSet[AlphAtrbt]-1;AlphAtrbtVl++){
                int Maximum;
                    Maximum=0;
                int Index;
                    Index=1;
                for(int Alph=0;Alph<alpha;Alph++){
                    int CumulativeNumber;
                        CumulativeNumber=0;
                    AlphaValueInGeneralDirichlet[AttributePriority[AlphAtrbt]-1][AlphAtrbtVl]=Alph+1;
                    for(int Instnc=0;Instnc<NumberOfInstanceInTestingDataSet;Instnc++){
                        double  Maximum;
                                Maximum=0;
                        int     Index;
                                Index=0;
                        double* Probability;
                        Probability=(double*)malloc(NumberOfAttributeInTestingDataSet*sizeof(double));
                        for(int Cls=0;Cls<NumberOfCategoryOfClassInTestingDataSet;Cls++){
                                    Probability[Cls]=ProbabilityOfEachClassValueInTrainningDataSet[Cls];
                            for(int Atrbt=0;Atrbt<NumberOfAttributeInTestingDataSet;Atrbt++){
                                int InstncAtrbtVlOfAtrbt;
                                    InstncAtrbtVlOfAtrbt=TestingDataSet[Instnc][Atrbt];
                                if(InstncAtrbtVlOfAtrbt!=NumberOfCategoryOfEachAttributeValueInTrainningDataSet[Atrbt]){ Probability[Cls]=Probability[Cls]*ZProng[AlphaValueInGeneralDirichlet[Atrbt][InstncAtrbtVlOfAtrbt-1]-1][Cls][Atrbt][InstncAtrbtVlOfAtrbt-1];
                                }
                                for(int AtrbtVl=0;AtrbtVl<InstncAtrbtVlOfAtrbt-1;AtrbtVl++){
                                     Probability[Cls]=Probability[Cls]*OneMinusZProng[AlphaValueInGeneralDirichlet[Atrbt][AtrbtVl]-1][Cls][Atrbt][AtrbtVl];
                                }
                            }
                            if(Probability[Cls]>Maximum){
                                Maximum=Probability[Cls];
                                Index=Cls+1;
                            }
                        }
                        if(Index==TestingDataSet[Instnc][NumberOfAttributeInTestingDataSet+NumberOfClassInTestingDataSet-1]){
                            CumulativeNumber=CumulativeNumber+1;
                        }
                    }
                    if(CumulativeNumber>Maximum){
                        Maximum=CumulativeNumber;
                        FinalGeneralDirichletAccuracy=Maximum;
                        Index=Alph+1;
                    }
                }
                AlphaValueInGeneralDirichlet[AttributePriority[AlphAtrbt]-1][AlphAtrbtVl]=Index;
                FinalGeneralDirichletAlphaValue=AlphaValueInGeneralDirichlet;
            }
        }

        for(int AlphAtrbt=0;AlphAtrbt<NumberOfAttributeInTrainningDataSet;AlphAtrbt++){
            for(int AlphAtrbtVl=0;AlphAtrbtVl<NumberOfCategoryOfEachAttributeValueInTrainningDataSet[AlphAtrbt]-1;AlphAtrbtVl++){
                printf("%2d\t",FinalGeneralDirichletAlphaValue[AlphAtrbt][AlphAtrbtVl]);
            }printf("\n");
        }
        printf("Accuracy:\t%f\n",FinalGeneralDirichletAccuracy/(double)NumberOfInstanceInTestingDataSet);
        if(Fld==4&&IdentificationOfUCIDataSet==4){
            break;
        }
        printf("\n");
        printf("---------------------------------------------------------------------------\n");
        printf("\n");
        printf("\n");
    }
    printf("Finish!");
}
